.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MP3::Tag 3"
.TH MP3::Tag 3 "2024-05-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag \- Module for reading tags of MP3 audio files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use MP3::Tag;
\&
\&  $mp3 = MP3::Tag\->new($filename);
\&
\&  # get some information about the file in the easiest way
\&  ($title, $track, $artist, $album, $comment, $year, $genre) = $mp3\->autoinfo();
\&  # Or:
\&  $comment = $mp3\->comment();
\&  $dedicated_to
\&    = $mp3\->select_id3v2_frame_by_descr(\*(AqCOMM(fre,fra,eng,#0)[dedicated to]\*(Aq);
\&
\&  $mp3\->title_set(\*(AqNew title\*(Aq);         # Edit in\-memory copy
\&  $mp3\->select_id3v2_frame_by_descr(\*(AqTALB\*(Aq, \*(AqNew album name\*(Aq); # Edit in memory
\&  $mp3\->select_id3v2_frame_by_descr(\*(AqRBUF\*(Aq, $n1, $n2, $n3);    # Edit in memory
\&  $mp3\->update_tags({year => 1866});    # Edit in\-memory, and commit to file
\&  $mp3\->update_tags();                  # Commit to file
.Ve
.PP
The following low-level access code is discouraged; better use \fItitle()\fR
etc., \fItitle_set()\fR etc., \fIupdate_tags()\fR, \fIselect_id3v2_frame_by_descr()\fR
etc. methods on the wrapper \f(CW$mp3:\fR
.PP
.Vb 2
\&  # scan file for existing tags
\&  $mp3\->get_tags;
\&
\&  if (exists $mp3\->{ID3v1}) {
\&      # read some information from the tag
\&      $id3v1 = $mp3\->{ID3v1};  # $id3v1 is only a shortcut for $mp3\->{ID3v1}
\&      print $id3v1\->title;
\&
\&      # change the tag contents
\&      $id3v1\->all("Song","Artist","Album",2001,"Comment",10,"Top 40");
\&      $id3v1\->write_tag;
\&  }
\&
\&  if (exists $mp3\->{ID3v2}) {
\&      # read some information from the tag
\&      ($name, $info) = $mp3\->{ID3v2}\->get_frame("TIT2");
\&      # delete the tag completely from the file
\&      $mp3\->{ID3v2}\->remove_tag;
\&  } else {
\&      # create a new tag
\&      $mp3\->new_tag("ID3v2");
\&      $mp3\->{ID3v2}\->add_frame("TALB", "Album title");
\&      $mp3\->{ID3v2}\->write_tag;
\&  }
\&
\&  $mp3\->close();
.Ve
.PP
Please consider using the script \fImp3info2\fR; it allows simple access
to most features of this module via command-line options; see
mp3info2.
.SH "AUTHORS"
.IX Header "AUTHORS"
Thomas Geffert, thg@users.sourceforge.net
Ilya Zakharevich, ilyaz@cpan.org
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`MP3::Tag\*(C'\fR is a wrapper module to read different tags of mp3 files.
It provides an easy way to access the functions of separate modules which
do the handling of reading/writing the tags itself.
.PP
At the moment MP3::Tag::ID3v1 and MP3::Tag::ID3v2 are supported for
read and write; MP3::Tag::ImageExifTool, MP3::Tag::Inf, MP3::Tag::CDDB_File,
MP3::Tag::File,  MP3::Tag::Cue, MP3::Tag::ImageSize, MP3::Tag::LastResort
are supported for read access (the information obtained by
Image::ExifTool (if present), parsing \s-1CDDB\s0 files,
\&\fI.inf\fR file, the filename, and \fI.cue\fR file, and obtained via
Image::Size) (if present).
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 1
\& $mp3 = MP3::Tag\->new($filename);
.Ve
.Sp
Creates a mp3\-object, which can be used to retrieve/set
different tags.
.IP "\fIget_tags()\fR" 4
.IX Item "get_tags()"
.Vb 1
\&  [old name: getTags() . The old name is still available, but its use is not advised]
\&
\&  @tags = $mp3\->get_tags;
.Ve
.Sp
Checks which tags can be found in the mp3\-object. It returns
a list \f(CW@tags\fR which contains strings identifying the found tags, like
\&\*(L"ID3v1\*(R", \*(L"ID3v2\*(R", \*(L"Inf\*(R", or \*(L"CDDB_File\*(R" (the last but one if the \fI.inf\fR
information file with the same basename as \s-1MP3\s0 file is found).
.Sp
Each found tag can then be accessed with \f(CW$mp3\fR\->{tagname} , where tagname is
a string returned by get_tags ;
.Sp
Use the information found in MP3::Tag::ID3v1, MP3::Tag::ID3v2 and
MP3::Tag::Inf, MP3::Tag::CDDB_File, MP3::Tag::Cue to see what you can do with the tags.
.IP "new_fake" 4
.IX Item "new_fake"
.Vb 1
\&  $obj = MP3::Tag\->new_fake();
.Ve
.Sp
This method produces a \*(L"fake\*(R" MP3::Tag object which behaves as an \s-1MP3\s0
file without tags.  Give a \s-1TRUE\s0 optional argument if you want to set
some properties of this object.
.IP "\fInew_tag()\fR" 4
.IX Item "new_tag()"
.Vb 1
\&  [old name: newTag() . The old name is still available, but its use is not advised]
\&
\&  $tag = $mp3\->new_tag($tagname);
.Ve
.Sp
Creates a new tag of the given type \f(CW$tagname\fR. You
can access it then with \f(CW$mp3\fR\->{$tagname}. At the
moment ID3v1 and ID3v2 are supported as tagname.
.Sp
Returns an tag-object: \f(CW$mp3\fR\->{$tagname}.
.IP "\fIclose()\fR" 4
.IX Item "close()"
.Vb 1
\&  $mp3\->close;
.Ve
.Sp
You can use \fIclose()\fR to explicitly close a file. Normally this is done
automatically by the module, so that you do not need to do this.
.IP "\fIgenres()\fR" 4
.IX Item "genres()"
.Vb 3
\&  $allgenres = $mp3\->genres;
\&  $genreName = $mp3\->genres($genreID);
\&  $genreID   = $mp3\->genres($genreName);
.Ve
.Sp
Returns a list of all genres (reference to an array), or the according 
name or id to a given id or name.
.Sp
This function is only a shortcut to MP3::Tag::ID3v1\->genres.
.Sp
This can be also called as MP3::Tag\->genres;
.IP "\fIautoinfo()\fR" 4
.IX Item "autoinfo()"
.Vb 2
\&  ($title, $track, $artist, $album, $comment, $year, $genre) = $mp3\->autoinfo();
\&  $info_hashref = $mp3\->autoinfo();
.Ve
.Sp
\&\fIautoinfo()\fR returns information about the title, track number,
artist, album name, the file comment, the year and genre.  It can get this
information from an ID3v1\-tag, an ID3v2\-tag, from \s-1CDDB\s0 file, from \fI.inf\fR\-file,
and from the filename itself.
.Sp
It will as default first try to find a ID3v2\-tag to get this
information. If this cannot be found it tries to find a ID3v1\-tag, then
to read an \s-1CDDB\s0 file, an \fI.inf\fR\-file, and
if these are not present either, it will use the filename to retrieve
the title, track number, artist, album name.  The comment, year and genre
are found differently, via the \f(CW\*(C`comment\*(C'\fR, \f(CW\*(C`year\*(C'\fR and \f(CW\*(C`genre\*(C'\fR methods.
.Sp
You can change the order of lookup with the \fIconfig()\fR command.
.Sp
\&\fIautoinfo()\fR returns an array with the information or a hashref. The hash
has four keys 'title', 'track', 'artist' and 'album' where the information is
stored.  If comment, year or genre are found, the hash will have keys
\&'comment' and/or 'year' and/or 'genre' too.
.Sp
If an optional argument \f(CW\*(Aqfrom\*(Aq\fR is given, the returned values (title,
track number, artist, album name, the file comment, the year and genre) are
array references with the first element being the value, the second the
tag (\f(CW\*(C`ID3v2\*(C'\fR or \f(CW\*(C`ID3v1\*(C'\fR or \f(CW\*(C`Inf\*(C'\fR or \f(CW\*(C`CDDB_File\*(C'\fR or \f(CW\*(C`Cue\*(C'\fR or \f(CW\*(C`filename\*(C'\fR) from which
it is taken.
.Sp
(Deprecated name 'song' can be used instead of 'title' as well.)
.IP "\fIcomment()\fR" 4
.IX Item "comment()"
.Vb 1
\&  $comment = $mp3\->comment();           # empty string unless found
.Ve
.Sp
\&\fIcomment()\fR returns comment information. It can get this information from an
ID3v1\-tag, or an ID3v2\-tag (from \f(CW\*(C`COMM\*(C'\fR frame with empty <short> field),
\&\s-1CDDB\s0 file (from \f(CW\*(C`EXTD\*(C'\fR or \f(CW\*(C`EXTT\*(C'\fR fields), or \fI.inf\fR\-file (from
\&\f(CW\*(C`Trackcomment\*(C'\fR field).
.Sp
It will as default first try to find a ID3v2\-tag to get this
information. If no comment is found there, it tries to find it in a ID3v1\-tag,
if none present, will try \s-1CDDB\s0 file, then \fI.inf\fR\-file.  It returns an empty string if
no comment is found.
.Sp
You can change the order of this with the \fIconfig()\fR command.
.Sp
If an optional argument \f(CW\*(Aqfrom\*(Aq\fR is given, returns an array reference with
the first element being the value, the second the tag (ID3v2 or ID3v1) from
which the value is taken.
.IP "\fIyear()\fR" 4
.IX Item "year()"
.Vb 1
\&  $year = $mp3\->year();         # empty string unless found
.Ve
.Sp
\&\fIyear()\fR returns the year information. It can get this information from an
ID3v2\-tag, or ID3v1\-tag, or \fI.inf\fR\-file, or filename.
.Sp
It will as default first try to find a ID3v2\-tag to get this
information. If no year is found there, it tries to find it in a ID3v1\-tag,
if none present, will try \s-1CDDB\s0 file, then \fI.inf\fR\-file,
then by parsing the file name. It returns an empty string if no year is found.
.Sp
You can change the order of this with the \fIconfig()\fR command.
.Sp
If an optional argument \f(CW\*(Aqfrom\*(Aq\fR is given, returns an array reference with
the first element being the value, the second the tag (ID3v2 or ID3v1 or
filename) from which the value is taken.
.IP "\fIcomment_collection()\fR, \fIcomment_track()\fR, \fItitle_track()\fR. \fIartist_collection()\fR" 4
.IX Item "comment_collection(), comment_track(), title_track(). artist_collection()"
access the corresponding fields returned by \fIparse()\fR method of CDDB_File.
.IP "\fIcddb_id()\fR, \fIcdindex_id()\fR" 4
.IX Item "cddb_id(), cdindex_id()"
access the corresponding methods of \f(CW\*(C`ID3v2\*(C'\fR, \f(CW\*(C`Inf\*(C'\fR or \f(CW\*(C`CDDB_File\*(C'\fR.
.IP "\fItitle_set()\fR, \fIartist_set()\fR, \fIalbum_set()\fR, \fIyear_set()\fR, \fIcomment_set()\fR, \fItrack_set()\fR, \fIgenre_set()\fR" 4
.IX Item "title_set(), artist_set(), album_set(), year_set(), comment_set(), track_set(), genre_set()"
.Vb 1
\&  $mp3\->title_set($newtitle, [$force_id3v2]);
.Ve
.Sp
Set the corresponding value in ID3v1 tag, and, if the value does not fit,
or force_id3v2 is \s-1TRUE,\s0 in the ID3v2 tag.  Changes are made to in-memory
copy only.  To propagate to the file, use \fIupdate_tags()\fR or similar methods.
.IP "\fItrack1()\fR" 4
.IX Item "track1()"
Same as \fItrack()\fR, but strips trailing info: if \fItrack()\fR returns \f(CW\*(C`3/12\*(C'\fR
(which means track 3 of 12), this method returns \f(CW3\fR.
.IP "\fItrack2()\fR" 4
.IX Item "track2()"
Returns the second part of track number (compare with \fItrack1()\fR).
.IP "\fItrack0()\fR" 4
.IX Item "track0()"
Same as \fItrack1()\fR, but pads with leading 0s to width of \fItrack2()\fR; takes an
optional argument (default is 2) giving the pad width in absense of \fItrack2()\fR.
.IP "\fIdisk1()\fR, \fIdisk2()\fR" 4
.IX Item "disk1(), disk2()"
Same as \fItrack1()\fR, \fItrack2()\fR, but with disk-number instead of track-number
(stored in \f(CW\*(C`TPOS\*(C'\fR ID3v2 frame).
.IP "\fIdisk_alphanum()\fR" 4
.IX Item "disk_alphanum()"
Same as \fIdisk1()\fR, but encodes a non-empty result as a letter (1 maps to \f(CW\*(C`a\*(C'\fR,
2 to \f(CW\*(C`b\*(C'\fR, etc).  If number of disks is more than 26, falls back to numeric
(e.g, \f(CW\*(C`3/888\*(C'\fR will be encoded as \f(CW003\fR).
.IP "mime_type( [$lazy] )" 4
.IX Item "mime_type( [$lazy] )"
Returns the \s-1MIME\s0 type as a string.  Returns \f(CW\*(C`application/octet\-stream\*(C'\fR
for unrecognized types.  If not \f(CW$lazy\fR, will try harder (via ExifTool, if
needed).
.IP "mime_Pretype( [$lazy] )" 4
.IX Item "mime_Pretype( [$lazy] )"
Returns uppercased first component of \s-1MIME\s0 type.
.IP "\fIgenre()\fR" 4
.IX Item "genre()"
.Vb 1
\&  $genre = $mp3\->genre();               # empty string unless found
.Ve
.Sp
\&\fIgenre()\fR returns the genre string. It can get this information from an
ID3v2\-tag or ID3v1\-tag.
.Sp
It will as default first try to find a ID3v2\-tag to get this
information. If no genre is found there, it tries to find it in a ID3v1\-tag,
if none present, will try \fI.inf\fR\-file,
It returns an empty string if no genre is found.
.Sp
You can change the order of this with the \fIconfig()\fR command.
.Sp
If an optional argument \f(CW\*(Aqfrom\*(Aq\fR is given, returns an array reference with
the first element being the value, the second the tag (ID3v2 or ID3v1 or
filename) from which the value is taken.
.IP "\fIcomposer()\fR" 4
.IX Item "composer()"
.Vb 1
\&  $composer = $mp3\->composer();         # empty string unless found
.Ve
.Sp
\&\fIcomposer()\fR returns the composer.  By default, it gets from ID3v2 tag,
otherwise returns artist.
.Sp
You can change the inspected fields with the \fIconfig()\fR command.
Subject to normalization via \f(CW\*(C`translate_composer\*(C'\fR or
\&\f(CW\*(C`translate_person\*(C'\fR configuration variables.
.IP "\fIperformer()\fR" 4
.IX Item "performer()"
.Vb 1
\&  $performer = $mp3\->performer();               # empty string unless found
.Ve
.Sp
\&\fIperformer()\fR returns the main performer.  By default, it gets from ID3v2
tag \f(CW\*(C`TXXX[TPE1]\*(C'\fR, otherwise from ID3v2 tag \f(CW\*(C`TPE1\*(C'\fR, otherwise
returns artist.
.Sp
You can change the inspected fields with the \fIconfig()\fR command.
Subject to normalization via \f(CW\*(C`translate_performer\*(C'\fR or
\&\f(CW\*(C`translate_person\*(C'\fR configuration variables.
.IP "config" 4
.IX Item "config"
.Vb 2
\&  MP3::Tag\->config(item => value1, value2...);  # Set options globally
\&  $mp3\->config(item => value1, value2...);      # Set object options
.Ve
.Sp
When object options are first time set or get, the global options are
propagated into object options.  (So if global options are changed later, these
changes are not inherited.)
.Sp
Possible items are:
.RS 4
.IP "autoinfo" 4
.IX Item "autoinfo"
Configure the order in which ID3v1\-, ID3v2\-tag and filename are used
by autoinfo.  The default is \f(CW\*(C`ParseData, ID3v2, ID3v1, ImageExifTool,
CDDB_File, Inf, Cue, ImageSize, filename, LastResort\*(C'\fR.
Options can be elements of the default list.  The order
in which they are given to config also sets the order how they are
used by autoinfo. If an option is not present, it will not be used
by autoinfo (and other auto-methods if the specific overriding config
command were not issued).
.Sp
.Vb 1
\&  $mp3\->config("autoinfo","ID3v1","ID3v2","filename");
.Ve
.Sp
sets the order to check first ID3v1, then ID3v2 and at last the
Filename
.Sp
.Vb 1
\&  $mp3\->config("autoinfo","ID3v1","filename","ID3v2");
.Ve
.Sp
sets the order to check first ID3v1, then the Filename and last
ID3v2. As the filename will be always present ID3v2 will here
never be checked.
.Sp
.Vb 1
\&  $mp3\->config("autoinfo","ID3v1","ID3v2");
.Ve
.Sp
sets the order to check first ID3v1, then ID3v2. The filename will
never be used.
.IP "title artist album year comment track genre" 4
.IX Item "title artist album year comment track genre"
Configure the order in which ID3v1\- and ID3v2\-tag are used
by the corresponding methods (e.g., \fIcomment()\fR).  Options can be
the same as for \f(CW\*(C`autoinfo\*(C'\fR.  The order
in which they are given to config also sets the order how they are
used by \fIcomment()\fR. If an option is not present, then \f(CW\*(C`autoinfo\*(C'\fR option
will be used instead.
.IP "extension" 4
.IX Item "extension"
regular expression to match the file extension (including the dot).  The
default is to match 1..4 letter extensions which are not numbers.
.IP "composer" 4
.IX Item "composer"
string to put into \f(CW\*(C`%{}\*(C'\fR to interpolate to get the composer.  Default
is \f(CW\*(AqTCOM|a\*(Aq\fR.
.IP "performer" 4
.IX Item "performer"
string to put into \f(CW\*(C`%{}\*(C'\fR to interpolate to get the main performer.
Default is \f(CW\*(AqTXXX[TPE1]|TPE1|a\*(Aq\fR.
.IP "parse_data" 4
.IX Item "parse_data"
the data used by MP3::Tag::ParseData handler; each option is an array
reference of the form \f(CW\*(C`[$flag, $string, $pattern1, ...]\*(C'\fR.  All the options
are processed in the following way: patterns are matched against \f(CW$string\fR
until one of them succeeds; the information obtained from later options takes
precedence over the information obtained from earlier ones.
.IP "parse_split" 4
.IX Item "parse_split"
The regular expression to split the data when parsing with \f(CW\*(C`n\*(C'\fR or \f(CW\*(C`l\*(C'\fR flags.
.IP "parse_filename_ignore_case" 4
.IX Item "parse_filename_ignore_case"
If true (default), calling \fIparse()\fR and \fIparse_rex()\fR with match-filename
escapes (such as \f(CW\*(C`%=D\*(C'\fR) matches case-insensitively.
.IP "parse_filename_merge_dots" 4
.IX Item "parse_filename_merge_dots"
If true (default), calling \fIparse()\fR and \fIparse_rex()\fR with match-filename
escapes (such as \f(CW\*(C`%=D\*(C'\fR) does not distinguish a dot and many consequent
dots.
.IP "parse_join" 4
.IX Item "parse_join"
string to put between multiple occurences of a tag in a parse pattern;
defaults to \f(CW\*(Aq; \*(Aq\fR.  E.g., parsing \f(CW\*(Aq1988\-1992, Homer (LP)\*(Aq\fR with pattern
\&\f(CW\*(Aq%c, %a (%c)\*(Aq\fR results in comment set to \f(CW\*(Aq1988\-1992; LP\*(Aq\fR with the
default value of \f(CW\*(C`parse_join\*(C'\fR.
.IP "v2title" 4
.IX Item "v2title"
Configure the elements of ID3v2\-tag which are used by \fIID3v2::title()\fR.
Options can be \*(L"\s-1TIT1\*(R", \*(L"TIT2\*(R", \*(L"TIT3\*(R"\s0; the present values are combined.
If an option is not present, it will not be used by \fIID3v2::title()\fR.
.IP "cddb_files" 4
.IX Item "cddb_files"
List of files to look for in the directory of \s-1MP3\s0 file to get \s-1CDDB\s0 info.
.IP "year_is_timestamp" 4
.IX Item "year_is_timestamp"
If \s-1TRUE\s0 (default) \fIparse()\fR will match complicated timestamps against \f(CW%y\fR;
for example, \f(CW\*(C`2001\-10\-23\-\-30,2002\-02\-28\*(C'\fR is a range from 23rd to 30th of
October 2001, \fIand\fR 28th of February of 2002.  According to \s-1ISO,\s0 \f(CW\*(C`\-\-\*(C'\fR can
be replaced by \f(CW\*(C`/\*(C'\fR as well.  For convenience, the leading 0 can be omited
from the fields which \s-1ISO\s0 requires to be 2\-digit.
.IP "comment_remove_date" 4
.IX Item "comment_remove_date"
When extracting the date from comment fields, remove the recognized portion
even if it is human readable (e.g., \f(CW\*(C`Recorded on 2014\-3\-23\*(C'\fR) if \s-1TRUE.\s0
Current default: \s-1FALSE.\s0
.IP "default_language" 4
.IX Item "default_language"
The language to use to select ID3v2 frames, and to choose \f(CW\*(C`COMM\*(C'\fR
ID3v2 frame accessed in \fIcomment()\fR method (default is '\s-1XXX\s0'; if not
\&\f(CW\*(C`XXX\*(C'\fR, this should be lowercase 3\-letter abbreviation according to
\&\s-1ISO\-639\-2\s0).
.IP "default_descr_c" 4
.IX Item "default_descr_c"
The description field used to choose the \f(CW\*(C`COMM\*(C'\fR ID3v2 frame accessed
in \fIcomment()\fR method.  Defaults to \f(CW\*(Aq\*(Aq\fR.
.IP "id3v2_frame_empty_ok" 4
.IX Item "id3v2_frame_empty_ok"
When setting the individual id3v2 frames via ParseData, do not
remove the frames set to an empty string.  Default 0 (empty means 'remove').
.IP "id3v2_minpadding" 4
.IX Item "id3v2_minpadding"
Minimal padding to reserve after ID3v2 tag when writing (default 128),
.IP "id3v2_sizemult" 4
.IX Item "id3v2_sizemult"
Additionally to \f(CW\*(C`id3v2_minpadding\*(C'\fR, insert padding to make file size multiple
of this when writing ID3v2 tag (default 512),  Should be power of 2.
.IP "id3v2_shrink" 4
.IX Item "id3v2_shrink"
If \s-1TRUE,\s0 when writing ID3v2 tag, shrink the file if needed (default \s-1FALSE\s0).
.IP "id3v2_mergepadding" 4
.IX Item "id3v2_mergepadding"
If \s-1TRUE,\s0 when writing ID3v2 tag, consider the 0\-bytes following the
ID3v2 header as writable space for the tag (default \s-1FALSE\s0).
.IP "update_length" 4
.IX Item "update_length"
If \s-1TRUE,\s0 when writing ID3v2 tag, create a \f(CW\*(C`TLEN\*(C'\fR tag if the duration
is known (as it is after calling methods like \f(CW\*(C`total_secs\*(C'\fR, or
interpolation the duration value).  If this field is 2 or more, force
creation of ID3v2 tag by \fIupdate_tags()\fR if the duration is known.
.IP "translate_*" 4
.IX Item "translate_*"
\&\s-1FALSE,\s0 or a subroutine used to munch a field \f(CW\*(C`*\*(C'\fR (out of \f(CW\*(C`title
track artist album comment year genre comment_collection comment_track
title_track artist_collection person\*(C'\fR) to some \*(L"normalized\*(R" form.
Takes two arguments: the MP3::Tag object, and the current value of the
field.
.Sp
The second argument may also have the form \f(CW\*(C`[value, handler]\*(C'\fR, where
\&\f(CW\*(C`handler\*(C'\fR is the string indentifying the handler which returned the
value.
.IP "short_person" 4
.IX Item "short_person"
Similar to \f(CW\*(C`translate_person\*(C'\fR, but the intent is for this subroutine
to translate a personal name field to a shortest \*(L"normalized\*(R" form.
.IP "person_frames" 4
.IX Item "person_frames"
list of ID3v2 frames subject to normalization via \f(CW\*(C`translate_person\*(C'\fR
handler; current default is \f(CW\*(C`TEXT TCOM TXXX[TPE1] TPE1 TPE3 TOPE TOLY
TMCL TIPL TENC TXXX[person\-file\-by]\*(C'\fR.
Used by \fIselect_id3v2_frame_by_descr()\fR, \fIframe_translate()\fR,
\&\fIframes_translate()\fR.
.IP "id3v2_missing_fatal" 4
.IX Item "id3v2_missing_fatal"
If \s-1TRUE,\s0 interpolating ID3v2 frames (e.g., by \f(CW\*(C`%{TCOM}\*(C'\fR) when
the ID3v2 tags is missing is a fatal error.  If false (default), in such cases
interpolation results in an empty string.
.IP "id3v2_recalculate" 4
.IX Item "id3v2_recalculate"
If \s-1TRUE,\s0 interpolating the whole ID3v2 tag (by \f(CW\*(C`%{ID3v2}\*(C'\fR) will recalculate
the tag even if its contents is not modified.
.IP "parse_minmatch" 4
.IX Item "parse_minmatch"
may be 0, 1, or a list of \f(CW\*(C`%\*(C'\fR\-escapes (matching any string) which should
matched non-greedily by \fIparse()\fR and friends.  E.g., parsing 
\&\f(CW\*(AqAdagio \- Andante \- Piano Sonata\*(Aq\fR via \f(CW\*(Aq%t \- %l\*(Aq\fR gives different results
for the settings 0 and 1; note that greediness of \f(CW%l\fR does not matter,
thus the value of 1 is equivalent for the value of \f(CW\*(C`t\*(C'\fR for this particular
pattern.
.IP "id3v23_unsync_size_w" 4
.IX Item "id3v23_unsync_size_w"
Old experimental flag to test why ITunes refuses to handle unsyncronized tags
(does not help, see id3v23_unsync).  The idea was that
version 2.3 of the standard is not clear about frame size field, whether it
is the size of the frame after unsyncronization, or not.  We assume
that this size is one before unsyncronization (as in v2.2).
Setting this value to 1 will assume another interpretation (as in v2.4) for
write.
.IP "id3v23_unsync" 4
.IX Item "id3v23_unsync"
Some broken \s-1MP3\s0 players (e.g., ITunes, at least up to v6) refuse to
handle unsyncronized (i.e., written as the standard requires it) tags;
they may need this to be set to \s-1FALSE.\s0  Default: \s-1TRUE.\s0
.Sp
(Some details: by definition, \s-1MP3\s0 files should contain combinations of bytes
\&\f(CW\*(C`FF F*\*(C'\fR or \f(CW\*(C`FF E*\*(C'\fR only at the start of audio frames (\*(L"syncronization\*(R" points).
ID3v2 standards take this into account, and supports storing raw tag data
in a format which does not contain these combinations of bytes
[via \*(L"unsyncronization\*(R"].  Itunes etc do not only emit broken \s-1MP3\s0 files
[which cause severe hiccups in players which do not know how to skip ID3v2
tags, as most settop \s-1DVD\s0 players], they also refuse to read ID3v2 tags
written in a correct, unsyncronized, format.)
.Sp
(Note also that the issue of syncronization is also applicable to ID3v1
tags; however, since this data is near the end of the file, many players
are able to recognize that the syncronization points in ID3v1 tag cannot
start a valid frame, since there is not enough data to read; some other
players would hiccup anyway if ID3v1 contains these combinations of bytes...)
.IP "encoded_v1_fits" 4
.IX Item "encoded_v1_fits"
If \s-1FALSE\s0 (default), data containing \*(L"high bit characters\*(R" is considered to
not fit ID3v1 tag if one of the following conditions hold:
.RS 4
.IP "1." 4
\&\f(CW\*(C`encode_encoding_v1\*(C'\fR is set (so the resulting ID3v1 tag is not
standard-complying, thus ambiguous without ID3v2), or
.IP "2." 4
\&\f(CW\*(C`encode_encoding_v1\*(C'\fR is not set, but \f(CW\*(C`decode_encoding_v1\*(C'\fR is set
(thus read+write operation is not idempotent for ID3v1 tag).
.RE
.RS 4
.Sp
With the default setting, these problems are resolved as far as (re)encoding
of ID3v2 tag is non-ambiguous (which holds with the default settings for
ID3v2 encodeing).
.RE
.IP "decode_encoding_v1" 4
.IX Item "decode_encoding_v1"
.PD 0
.IP "encode_encoding_v1" 4
.IX Item "encode_encoding_v1"
.IP "decode_encoding_v2" 4
.IX Item "decode_encoding_v2"
.IP "decode_encoding_filename" 4
.IX Item "decode_encoding_filename"
.IP "decode_encoding_inf" 4
.IX Item "decode_encoding_inf"
.IP "decode_encoding_cddb_file" 4
.IX Item "decode_encoding_cddb_file"
.IP "decode_encoding_cue" 4
.IX Item "decode_encoding_cue"
.IP "decode_encoding_files" 4
.IX Item "decode_encoding_files"
.IP "encode_encoding_files" 4
.IX Item "encode_encoding_files"
.PD
Encodings of \f(CW\*(C`ID3v1\*(C'\fR, non-Unicode frames of \f(CW\*(C`ID3v2\*(C'\fR, filenames,
external files, \fI.inf\fR files, \f(CW\*(C`CDDB\*(C'\fR files, \fI.cue\fR files,
and user-specified files correspondingly.  The value of 0 means \*(L"latin1\*(R".
.Sp
The default values for \f(CW\*(C`decode_encoding_*\*(C'\fR are set from the
corresponding \f(CW\*(C`MP3TAG_DECODE_*_DEFAULT\*(C'\fR environment variable (here
\&\f(CW\*(C`*\*(C'\fR stands for the uppercased last component of the name); if this
variable is not set, from \f(CW\*(C`MP3TAG_DECODE_DEFAULT\*(C'\fR.  Likewise, the
default value for \f(CW\*(C`encode_encoding_v1\*(C'\fR is set from
\&\f(CW\*(C`MP3TAG_ENCODE_V1_DEFAULT\*(C'\fR or \f(CW\*(C`MP3TAG_ENCODE_DEFAULT\*(C'\fR; if not
present, from the value for \f(CW\*(C`decode_encoding_v1\*(C'\fR; similarly for
\&\f(CW\*(C`encode_encoding_files\*(C'\fR.
.Sp
Note that \f(CW\*(C`decode_encoding_v2\*(C'\fR has no \*(L"encode\*(R" pair; it may also be disabled
per tag via effects of \f(CW\*(C`ignore_trusted_encoding0_v2\*(C'\fR and the corresponding
frame \f(CW\*(C`TXXX[trusted_encoding0_v2]\*(C'\fR in the tag.  One should also keep in
mind that the ID3v1 standard requires the encoding to be \*(L"latin1\*(R" (so
does not store the encoding anywhere); this does not make a lot of sense,
and a lot of effort of this module is spend to fix this unfortunate flaw.
See \*(L"Problems with \s-1ID3\s0 format\*(R".
.IP "ignore_trusted_encoding0_v2" 4
.IX Item "ignore_trusted_encoding0_v2"
If \s-1FALSE\s0 (default), and the frame \f(CW\*(C`TXXX[trusted_encoding0_v2]\*(C'\fR is set to \s-1TRUE,\s0
the setting of \f(CW\*(C`decode_encoding_v2\*(C'\fR is ignored.
.IP "id3v2_set_trusted_encoding0" 4
.IX Item "id3v2_set_trusted_encoding0"
If \s-1TRUE\s0 (default), and frames are converted from the given \f(CW\*(C`decode_encoding_v2\*(C'\fR
to a standard-conforming encoding, a frame \f(CW\*(C`TXXX[trusted_encoding0_v2]\*(C'\fR with
a \s-1TRUE\s0 value is added.
.Sp
[The purpose is to make multi-step update in presence of \f(CW\*(C`decode_encoding_v2\*(C'\fR
possible; with \f(CW\*(C`id3v2_set_trusted_encoding0\*(C'\fR \s-1TRUE,\s0 and
\&\f(CW\*(C`ignore_trusted_encoding0_v2\*(C'\fR \s-1FALSE\s0 (both are default values), editing of tags
can be idempotent.]
.IP "id3v2_fix_encoding_on_write" 4
.IX Item "id3v2_fix_encoding_on_write"
If \s-1TRUE\s0 and \f(CW\*(C`decode_encoding_v2\*(C'\fR is defined, the ID3v2 frames are converted
to standard-conforming encodings on write.  The default is \s-1FALSE.\s0
.IP "id3v2_fix_encoding_on_edit" 4
.IX Item "id3v2_fix_encoding_on_edit"
If \s-1TRUE\s0 (default) and \f(CW\*(C`decode_encoding_v2\*(C'\fR is defined (and not disabled
via a frame \f(CW\*(C`TXXX[trusted_encoding0_v2]\*(C'\fR and the setting
\&\f(CW\*(C`ignore_trusted_encoding0_v2\*(C'\fR), a \s-1CYA\s0 action is performed when an
edit may result in a confusion.  More precise, adding an ID3v2 frame which
is \fIessentially\fR affected by \f(CW\*(C`decode_encoding_v2\*(C'\fR would convert other
frames to a standard-conforming encoding (and would set
\&\f(CW\*(C`TXXX[trusted_encoding0_v2]\*(C'\fR if required by \f(CW\*(C`id3v2_set_trusted_encoding0\*(C'\fR).
.Sp
Recall that the added frames are always encoded in standard-conformant way;
the action above avoids mixing non-standard-conformant frames with
standard-conformant frames.  Such a mix could not be cleared up by setting
\&\f(CW\*(C`decode_encoding_v2\*(C'\fR!  One should also keep in mind that this does not affect
frames which contain characters above \f(CW0x255\fR; such frames are always written
in Unicode, thus are not affected by \f(CW\*(C`decode_encoding_v2\*(C'\fR.
.IP "id3v2_frames_autofill" 4
.IX Item "id3v2_frames_autofill"
Hash of suggested ID3v2 frames to autogenerate basing on extra information
available; keys are frame descriptors (such as \f(CW\*(C`TXXX[cddb_id]\*(C'\fR), values
indicate whether ID3v2 tag should be created if it was not present.
.Sp
This variable is inspected by the method \f(CW\*(C`id3v2_frames_autofill\*(C'\fR,
which is not called automatically when the tag is accessed, but may be called
by scripts using the module.
.Sp
The default is to force creation of tag for \f(CW\*(C`TXXX[MCDI\-fulltoc]\*(C'\fR frame, and do not
force creation for \f(CW\*(C`TXXX[cddb_id]\*(C'\fR and \f(CW\*(C`TXXX[cdindex_id]\*(C'\fR.
.IP "local_cfg_file" 4
.IX Item "local_cfg_file"
Name of configuration file read at startup by the method \fIparse_cfg()\fR; is
\&\f(CW\*(C`~\*(C'\fR\-substituted; defaults to \fI~/.mp3tagprc\fR.
.IP "prohibit_v24" 4
.IX Item "prohibit_v24"
If \s-1FALSE\s0 (default), reading of ID3v2.4 is allowed (it is not fully supported,
but most things work acceptably).
.IP "write_v24" 4
.IX Item "write_v24"
If \s-1FALSE\s0 (default), writing of ID3v2.4 is prohibited (it is not fully
supported; allow on your own risk).
.IP "name_for_field_normalization" 4
.IX Item "name_for_field_normalization"
interpolation of this string is used as a person name to normalize
title-like fields.  Defaults to \f(CW\*(C`%{composer}\*(C'\fR.
.IP "extra_config_keys" 4
.IX Item "extra_config_keys"
List of extra config keys (default is empty); setting these would not cause
warnings, and would not affect operation of \f(CW\*(C`MP3::Tag\*(C'\fR.  Applications using
this module may add to this list to allow their configuration by the same
means as configuration of \f(CW\*(C`MP3::Tag\*(C'\fR.
.IP "is_writable" 4
.IX Item "is_writable"
Contains a boolean value, or a method name and argument list
to call whether the tag may be added to the file.  Defaults to
\&\fIwritable_by_extension()\fR.
.IP "writable_extensions" 4
.IX Item "writable_extensions"
Contains a list of extensions (case insensitive) for which the tag may be
added to the file.  Current default is \f(CW\*(C`mp3 mp2 id3 tag ogg mpg mpeg
mp4 aiff flac ape ram mpc\*(C'\fR (extracted from ExifTool docs; may be tuned
later).
.IP "*" 4
Later there will be probably more things to configure.
.RE
.RS 4
.RE
.IP "get_config" 4
.IX Item "get_config"
.Vb 1
\&  $opt_array = $mp3\->get_config("item");
.Ve
.Sp
When object options are first time set or get, the global options are
propagated into object options.  (So if global options are changed later, these
changes are not inherited.)
.IP "get_config1" 4
.IX Item "get_config1"
.Vb 1
\&  $opt = $mp3\->get_config1("item");
.Ve
.Sp
Similar to \fIget_config()\fR, but returns \s-1UNDEF\s0 if no config array is present, or
the first entry of array otherwise.
.IP "name_for_field_normalization" 4
.IX Item "name_for_field_normalization"
.Vb 1
\&  $name = $mp3\->name_for_field_normalization;
.Ve
.Sp
Returns \*(L"person name\*(R" to use for normalization of title-like fields;
it is the result of interpolation of the configuration variable
\&\f(CW\*(C`name_for_field_normalization\*(C'\fR (defaults to \f(CW\*(C`%{composer}\*(C'\fR \- which, by
default, expands the same as \f(CW\*(C`%{TCOM|a}\*(C'\fR).
.IP "pure_filetags" 4
.IX Item "pure_filetags"
.Vb 1
\&  $data = $mp3\->pure_filetags()\->autoinfo;
.Ve
.Sp
Configures \f(CW$mp3\fR to not read anything except the pure ID3v2 or ID3v1 tags, and
do not postprocess them.  Returns the object reference itself to simplify
chaining of method calls.
.IP "get_user" 4
.IX Item "get_user"
.Vb 1
\&  $data = $mp3\->get_user($n);   # n\-th piece of user scratch space
.Ve
.Sp
Queries an entry in a scratch array ($n=3 corresponds to \f(CW\*(C`%{U3}\*(C'\fR).
.IP "set_user" 4
.IX Item "set_user"
.Vb 1
\&  $mp3\->set_user($n, $data);    # n\-th piece of user scratch space
.Ve
.Sp
Sets an entry in a scratch array ($n=3 corresponds to \f(CW\*(C`%{U3}\*(C'\fR).
.IP "set_id3v2_frame" 4
.IX Item "set_id3v2_frame"
.Vb 1
\&  $mp3\->set_id3v2_frame($name, @values);
.Ve
.Sp
When called with only \f(CW$name\fR as the argument, removes the specified
frame (if it existed).  Otherwise sets the frame passing the specified
\&\f(CW@values\fR to the \fIadd_frame()\fR function of MP3::Tag::ID3v2.  (The old value is
removed.)
.IP "get_id3v2_frames" 4
.IX Item "get_id3v2_frames"
.Vb 1
\&  ($descr, @frames) = $mp3\->get_id3v2_frames($fname);
.Ve
.Sp
Returns the specified frame(s); has the same \s-1API\s0 as
MP3::Tag::ID3v2::get_frames, but also returns undef if no ID3v2
tag is present.
.IP "delete_tag" 4
.IX Item "delete_tag"
.Vb 1
\&  $deleted = $mp3\->delete_tag($tag);
.Ve
.Sp
\&\f(CW$tag\fR should be either \f(CW\*(C`ID3v1\*(C'\fR or \f(CW\*(C`ID3v2\*(C'\fR.  Deletes the tag if it is present.
Returns \s-1FALSE\s0 if the tag is not present.
.IP "is_id3v2_modified" 4
.IX Item "is_id3v2_modified"
.Vb 1
\&  $frame = $mp3\->is_id3v2_modified();
.Ve
.Sp
Returns \s-1TRUE\s0 if ID3v2 tag exists and was modified after creation.
.IP "select_id3v2_frame" 4
.IX Item "select_id3v2_frame"
.Vb 1
\&  $frame = $mp3\->select_id3v2_frame($fname, $descrs, $langs [, $VALUE]);
.Ve
.Sp
Returns the specified frame(s); has the same \s-1API\s0 as
\&\*(L"frame_select\*(R" in MP3::Tag::ID3v2 (args are the frame name, the list of
wanted Descriptors, list of wanted Languages, and possibly the new
contents \- with \f(CW\*(C`undef\*(C'\fR meaning deletion).  For read-only access it
returns empty if no ID3v2 tag is present, or no frame is found.
.Sp
If new contents is specified, \fB\s-1ALL\s0\fR the existing frames matching the
specification are deleted.
.IP "have_id3v2_frame" 4
.IX Item "have_id3v2_frame"
.Vb 1
\&  $have_it = $mp3\->have_id3v2_frame($fname, $descrs, $langs);
.Ve
.Sp
Returns \s-1TRUE\s0 the specified frame(s) exist; has the same \s-1API\s0 as
MP3::Tag::ID3v2::frame_have (args are frame name, list of wanted
Descriptors, list of wanted Languages).
.IP "get_id3v2_frame_ids" 4
.IX Item "get_id3v2_frame_ids"
.Vb 2
\&  $h = $mp3\->get_id3v2_frame_ids();
\&  print "  $_ => $h{$_}" for keys %$h;
.Ve
.Sp
Returns a hash reference with the short names of ID3v2 frames present
in the tag as keys (and long description of the meaning as values), or
\&\s-1FALSE\s0 if no ID3v2 tag is present.  See
MP3::Tags::ID3v2::get_frame_ids for details.
.IP "id3v2_frame_descriptors" 4
.IX Item "id3v2_frame_descriptors"
Returns the list of human-readable \*(L"long names\*(R" of frames (such as
\&\f(CW\*(C`COMM(eng)[lyricist birthdate]\*(C'\fR), appropriate for interpolation, or
for \fIselect_id3v2_frame_by_descr()\fR.
.IP "select_id3v2_frame_by_descr" 4
.IX Item "select_id3v2_frame_by_descr"
.PD 0
.IP "have_id3v2_frame_by_descr" 4
.IX Item "have_id3v2_frame_by_descr"
.PD
Similar to \fIselect_id3v2_frame()\fR, \fIhave_id3v2_frame()\fR, but instead of
arguments \f(CW$fname\fR, \f(CW$descrs\fR, \f(CW$langs\fR take one string of the form
.Sp
.Vb 1
\&  NAME(langs)[descr]
.Ve
.Sp
Both \f(CW\*(C`(langs)\*(C'\fR and \f(CW\*(C`[descr]\*(C'\fR parts may be omitted; langs should
contain comma-separated list of needed languages.  The semantic is
similar to
MP3::Tag::ID3v2::frame_select_by_descr_simpler.
.Sp
It is allowed to have \f(CW\*(C`NAME\*(C'\fR of the form \f(CW\*(C`FRAMnn\*(C'\fR; \f(CW\*(C`nn\*(C'\fR\-th frame
with name \f(CW\*(C`FRAM\*(C'\fR is chosen (\f(CW\*(C`\-1\*(C'\fR\-based: the first frame is \f(CW\*(C`FRAM\*(C'\fR,
the second \f(CW\*(C`FRAM00\*(C'\fR, the third \f(CW\*(C`FRAM01\*(C'\fR etc; for more user-friendly
scheme, use \f(CW\*(C`langs\*(C'\fR of the form \f(CW\*(C`#NNN\*(C'\fR, with \f(CW\*(C`NNN\*(C'\fR 0\-based; see
\&\*(L"\fIget_frame_ids()\fR\*(R" in MP3::Tag::ID3v2).
.Sp
.Vb 2
\&  $frame = $mp3\->select_id3v2_frame_by_descr($descr [, $VALUE1, ...]);
\&  $have_it = $mp3\->have_id3v2_frame_by_descr($descr);
.Ve
.Sp
\&\fIselect_id3v2_frame_by_descr()\fR will also apply the normalizer in config
setting \f(CW\*(C`translate_person\*(C'\fR if the frame name matches one of the
elements of the configuration setting \f(CW\*(C`person_frames\*(C'\fR.
.Sp
.Vb 6
\&  $c = $mp3\->select_id3v2_frame_by_descr("COMM(fre,fra,eng,#0)[]");
\&  $t = $mp3\->select_id3v2_frame_by_descr("TIT2");
\&       $mp3\->select_id3v2_frame_by_descr("TIT2", "MyT"); # Set/Change
\&       $mp3\->select_id3v2_frame_by_descr("RBUF", $n1, $n2, $n3); # Set/Change
\&       $mp3\->select_id3v2_frame_by_descr("RBUF", "$n1;$n2;$n3"); # Set/Change
\&       $mp3\->select_id3v2_frame_by_descr("TIT2", undef); # Remove
.Ve
.Sp
Remember that when \fIselect_id3v2_frame_by_descr()\fR is used for
modification, \fB\s-1ALL\s0\fR found frames are deleted before a new one is
added.  For gory details, see \*(L"frame_select\*(R" in MP3::Tag::ID3v2.
.IP "frame_translate" 4
.IX Item "frame_translate"
.Vb 1
\&  $mp3\->frame_translate(\*(AqTCOM\*(Aq); # Normalize TCOM ID3v2 frame
.Ve
.Sp
assuming that the frame value denotes a person, normalizes the value
using personal name normalization logic (via \f(CW\*(C`translate_person\*(C'\fR
configuration value).  Frame is updated, but the tag is not written
back.  The frame must be in the list of personal names frames
(\f(CW\*(C`person_frames\*(C'\fR configuration value).
.IP "frames_translate" 4
.IX Item "frames_translate"
Similar to \fIframe_translate()\fR, but updates all the frames in
\&\f(CW\*(C`person_frames\*(C'\fR configuration value.
.ie n .IP "copy_id3v2_frames($from, $to, $overwrite, [$keep_flags, $f_ids])" 4
.el .IP "copy_id3v2_frames($from, \f(CW$to\fR, \f(CW$overwrite\fR, [$keep_flags, \f(CW$f_ids\fR])" 4
.IX Item "copy_id3v2_frames($from, $to, $overwrite, [$keep_flags, $f_ids])"
Copies specified frames between \f(CW\*(C`MP3::Tag\*(C'\fR objects \f(CW$from\fR, \f(CW$to\fR.  Unless
\&\f(CW$keep_flags\fR, the copied frames have their flags cleared.
If the array reference \f(CW$f_ids\fR is not specified, all the frames (but \f(CW\*(C`GRID\*(C'\fR
and \f(CW\*(C`TLEN\*(C'\fR) are considered (subject to \f(CW$overwrite\fR), otherwise \f(CW$f_ids\fR should
contain short frame ids to consider. Group \s-1ID\s0 flag is always cleared.
.Sp
If \f(CW$overwrite\fR is \f(CW\*(Aqdelete\*(Aq\fR, frames with the same descriptors (as
returned by \fIget_frame_descr()\fR) in \f(CW$to\fR are deleted first, then all the
specified frames are copied.  If \f(CW$overwrite\fR is \s-1FALSE,\s0 only frames with
descriptors not present in \f(CW$to\fR are copied.  (If one of these two
conditions is not met, the result may be not conformant to standards.)
.Sp
Returns count of copied frames.
.IP "_Data_to_MIME" 4
.IX Item "_Data_to_MIME"
Internal method to extract \s-1MIME\s0 type from a string the image file content.
Returns \f(CW\*(C`application/octet\-stream\*(C'\fR for unrecognized data
(unless extra \s-1TRUE\s0 argument is given).
.Sp
.Vb 1
\&  $format = $id3\->_Data_to_MIME($data);
.Ve
.Sp
Currently, only the first 4 bytes of the string are inspected.
.IP "shorten_person" 4
.IX Item "shorten_person"
.Vb 1
\&  $string = $mp3\->shorten_person($person_name);
.Ve
.Sp
shorten \f(CW$person_name\fR as a personal name (according to \f(CW\*(C`short_person\*(C'\fR
configuration setting).
.IP "normalize_person" 4
.IX Item "normalize_person"
.Vb 1
\&  $string = $mp3\->normalize_person($person_name);
.Ve
.Sp
normalize \f(CW$person_name\fR as a personal name (according to \f(CW\*(C`translate_person\*(C'\fR
configuration setting).
.IP "id3v2_frames_autofill" 4
.IX Item "id3v2_frames_autofill"
.Vb 1
\&  $mp3\->id3v2_frames_autofill($force);
.Ve
.Sp
Generates missing tags from the list specified in \f(CW\*(C`id3v2_frames_autofill\*(C'\fR
configuration variable.  The tags should be from a short list this method
knows how to deal with:
.Sp
.Vb 7
\&  TXXX[MCDI\-fulltoc]:   filled from file audio_cd.toc in directory of the
\&                        audio file.  [Create this file with
\&                          readcd \-fulltoc dev=0,1,0 \-f=audio_cd >& nul
\&                         modifying the dev (and redirection per your shell). ]
\&  TXXX[cddb_id]
\&  TXXX[cdindex_id]:     filled from the result of the corresponding method
\&                                (which may extract from .inf or cddb files).
.Ve
.Sp
Existing frames are not modified unless \f(CW$force\fR option is specified; when
\&\f(CW$force\fR is true, ID3v2 tag will be created even if it was not present.
.IP "interpolate" 4
.IX Item "interpolate"
.Vb 1
\&  $string = $mp3\->interpolate($pattern)
.Ve
.Sp
interpolates \f(CW\*(C`%\*(C'\fR\-escapes in \f(CW$pattern\fR using the information from \f(CW$mp3\fR tags.
The syntax of escapes is similar to this of \fIsprintf()\fR:
.Sp
.Vb 1
\&  % [ [FLAGS] MINWIDTH] [.MAXWIDTH] ESCAPE
.Ve
.Sp
The only recognized \s-1FLAGS\s0 are \f(CW\*(C`\-\*(C'\fR (to denote left-alignment inside \s-1MINWIDTH\-\s0
wide field), \f(CW\*(Aq \*(Aq\fR (\s-1SPACE\s0), and \f(CW0\fR (denoting the fill character to use), as
well as an arbitrary character in parentheses (which becomes the fill
character).  \s-1MINWIDTH\s0 and \s-1MAXWIDTH\s0 should be numbers.
.Sp
The short ESCAPEs are replaced by
.Sp
.Vb 10
\&                % => literal \*(Aq%\*(Aq
\&                t => title
\&                a => artist
\&                l => album
\&                y => year
\&                g => genre
\&                c => comment
\&                n => track
\&                f => filename without the directory path
\&                F => filename with the directory path
\&                D => the directory path of the filename
\&                E => file extension
\&                e => file extension without the leading dot
\&                A => absolute filename without extension
\&                B => filename without the directory part and extension
\&                N => filename as originally given without extension
\&
\&                v       mpeg_version
\&                L       mpeg_layer_roman
\&                r       bitrate_kbps
\&                q       frequency_kHz
\&                Q       frequency_Hz
\&                S       total_secs_int
\&                M       total_millisecs_int
\&                m       total_mins
\&                mL      leftover_mins
\&                H       total_hours
\&                s       leftover_secs
\&                SL      leftover_secs_trunc
\&                ML      leftover_msec
\&                SML     leftover_secs_float
\&                C       is_copyrighted_YN
\&                p       frames_padded_YN
\&                o       channel_mode
\&                u       frames
\&
\&                h       height  (these 3 for image files, Image::Size or Image::ExifData required)
\&                w       width
\&                iT      img_type
\&                mT      mime_type
\&                mP      mime_Pretype (the capitalized first part of mime_type)
\&                aR      aspect_ratio (width/height)
\&                a3      aspect_ratio3 (3 decimal places after the dot)
\&                aI      aspect_ratio_inverted (height/width)
\&                bD      bit_depth
\&
\&                aC      collection artist (from CDDB_File)
\&                tT      track title (from CDDB_File)
\&                cC      collection comment (from CDDB_File)
\&                cT      track comment (from CDDB_File)
\&                iC      CDDB id
\&                iI      CDIndex id
.Ve
.Sp
(Multi-char escapes must be inclosed in braces, as in \f(CW\*(C`%{SML}\*(C'\fR or \f(CW\*(C`%.5{aR}\*(C'\fR.
.Sp
Additional multi-char escapes are interpretated is follows:
.RS 4
.IP "\(bu" 4
Names of ID3v2 frames are replaced by their text values (empty for missing
frames).
.IP "\(bu" 4
Strings \f(CW\*(C`n1\*(C'\fR and \f(CW\*(C`n2\*(C'\fR are replaced by \*(L"pure track number\*(R" and
\&\*(L"max track number\*(R" (this allows for both formats \f(CW\*(C`N1\*(C'\fR and \f(CW\*(C`N1/N2\*(C'\fR of \*(L"track\*(R",
the latter meaning track N1 of N2); use \f(CW\*(C`n0\*(C'\fR to pad \f(CW\*(C`n1\*(C'\fR with leading 0
to the width of \f(CW\*(C`n2\*(C'\fR (in absense of n2, to 2).  Likewise for \f(CW\*(C`m1\*(C'\fR, \f(CW\*(C`m2\*(C'\fR
but with disk (media) number instead of track number; use \f(CW\*(C`mA\*(C'\fR to encode
\&\f(CW\*(C`m1\*(C'\fR as a letter (see \fIdisk_alphanum()\fR).
.IP "\(bu" 4
Strings \f(CW\*(C`ID3v1\*(C'\fR and \f(CW\*(C`ID3v2\*(C'\fR are replaced by the whole ID3v1/2 tag
(interpolation of \f(CW\*(C`ID3v2\*(C'\fR for an unmodified tag is subject to
\&\f(CW\*(C`id3v2_recalculate\*(C'\fR configuration variable).  (These may work as
conditionals too, with \f(CW\*(C`:\*(C'\fR.)
.IP "\(bu" 4
Strings of the form \f(CW\*(C`FRAM(list,of,languages)[description]\*(C'\fR are
replaced by the first \s-1FRAM\s0 frame with the descriptor \*(L"description\*(R" in
the specified comma-separated list of languages.  Instead of a
language (ID3v2 uses lowercase 3\-char \s-1ISO\-639\-2\s0 language notations) one can use
a string of the form \f(CW\*(C`#Number\*(C'\fR; e.g., \f(CW\*(C`#4\*(C'\fR means 4th \s-1FRAM\s0 frame, or
\&\s-1FRAM04.\s0  Empty string for the language means any language.)  Works as
a condition for conditional interpolation too.
.Sp
Any one of the list of languages and the disription can be omitted;
this means that either the frame \s-1FRAM\s0 has no language or descriptor
associated, or no restriction should be applied.
.Sp
Unknown language should be denoted as \f(CW\*(C`XXX\*(C'\fR (in uppercase!).  The language
match is case-insensitive.
.IP "\(bu" 4
Several descriptors of the form
\&\f(CW\*(C`FRAM(list,of,languages)[description]\*(C'\fR discussed above may be
combined together with \f(CW\*(C`&\*(C'\fR; the non-empty expansions are joined
together with the value of configuration variable \f(CW\*(C`ampersand_joiner\*(C'\fR
(default \f(CW"; "\fR).  Example:
.Sp
.Vb 1
\&  %{TXXX[pre\-title]&TIT1&TIT2&TIT3&TXXX[post\-title]}
.Ve
.IP "\(bu" 4
Strings of the form \f(CW\*(C`method(list,of,packages)[arg1][arg2]\*(C'\fR are replaced
by the result of \f(CW\*(C`method\*(C'\fR (with the given arguments) in one of the specified
known subpackages (e.g., for \f(CW\*(C`Inf\*(C'\fR,  \f(CW\*(C`MP3::Tag::Inf\*(C'\fR is used).  Arbitrary number
of arguments is supported.  Instead of a long name \f(CW\*(C`method\*(C'\fR one can use its
standard shortcut (e.g., \f(CW\*(C`t\*(C'\fR for \f(CW\*(C`title\*(C'\fR).  For example,
.Sp
.Vb 1
\&  $mp3\->interpolate(\*(Aq%{t(ID3v1,Cue)}\*(Aq)
.Ve
.Sp
returns the title from the ID3v1 tag, or (if not there) from a cue sheet.
One can use this in conditionals etc as well.
.IP "\(bu" 4
\&\f(CW\*(C`d\*(C'\fR\fI\s-1NUMBER\s0\fR is replaced by \fI\s-1NUMBER\s0\fR\-th component of the directory name (with
0 corresponding to the last component).
.IP "\(bu" 4
\&\f(CW\*(C`D\*(C'\fR\fI\s-1NUMBER\s0\fR is replaced by the directory name with \s-1NUMBER\s0 components stripped.
.IP "\(bu" 4
\&\f(CW\*(C`U\*(C'\fR\fI\s-1NUMBER\s0\fR is replaced by \fI\s-1NUMBER\s0\fR\-th component of the user scratch
array.
.IP "\(bu" 4
If string starts with \f(CW\*(C`FNAME:\*(C'\fR: if frame \s-1FNAME\s0 does not exists, the escape
is ignored; otherwise the rest of the string is reinterpreted.
.IP "\(bu" 4
String starting with \f(CW\*(C`!FNAME:\*(C'\fR are treated similarly with inverted test.
.IP "\(bu" 4
If string starts with \f(CW\*(C`FNAME||\*(C'\fR: if frame \s-1FNAME\s0 exists, the part
after \f(CW\*(C`||\*(C'\fR is ignored; otherwise the part before \f(CW\*(C`||\*(C'\fR is ignored,
and the rest is reinterpreted.
.IP "\(bu" 4
If string starts with \f(CW\*(C`FNAME|\*(C'\fR: if frame \s-1FNAME\s0 exists, the part
after \f(CW\*(C`|\*(C'\fR is ignored; otherwise the part before \f(CW\*(C`|\*(C'\fR is ignored,
and the rest is reinterpreted as if it started with \f(CW\*(C`%{\*(C'\fR.
.IP "\(bu" 4
String starting with \fI\s-1LETTER\s0\fR\f(CW\*(C`:\*(C'\fR or \f(CW\*(C`!\*(C'\fR\fI\s-1LETTER\s0\fR\f(CW\*(C`:\*(C'\fR are treated similarly
to ID3v2 conditionals, but the condition is that the corresponding escape
expands to non-empty string.  Same applies to non-time related 2\-char escapes
and user variables.
.IP "\(bu" 4
Likewise for string starting with \fI\s-1LETTER\s0\fR\f(CW\*(C`|\*(C'\fR or \fI\s-1LETTER\s0\fR\f(CW\*(C`||\*(C'\fR.
.IP "\(bu" 4
For strings of the form \f(CW\*(C`nmP[VALUE]\*(C'\fR or \f(CW\*(C`shP[VALUE]\*(C'\fR, \fI\s-1VALUE\s0\fR is
interpolated, then normalized or shortened as a personal name
(according to \f(CW\*(C`translate_person\*(C'\fR or \f(CW\*(C`short_person\*(C'\fR configuration
setting).
.IP "\(bu" 4
\&\f(CW\*(C`composer\*(C'\fR or \f(CW\*(C`performer\*(C'\fR is replaced by the result of calling the
corresponding method.
.IP "\(bu" 4
\&\f(CW\*(C`frames\*(C'\fR is replaced by space-separated list of \*(L"long names\*(R" of ID3v2
frames (see \fIid3v2_frame_descriptors()\fR).  (To use a different separator,
put it after slash, as in \f(CW\*(C`%{frames/, }\*(C'\fR, where separator is \s-1COMMA
SPACE\s0).
.IP "\(bu" 4
\&\f(CW\*(C`_out_frames[QQPRE//QQPOST]\*(C'\fR is replaced by a verbose listing of frames.
\&\*(L"simple\*(R" frames are output one-per-line (with the value surrounded by
\&\f(CW\*(C`QQPRE\*(C'\fR and \f(CW\*(C`QQPOST\*(C'\fR); fields of other frames are output one-per-line.
If one omits the leading \f(CW\*(C`_\*(C'\fR, then \f(CW\*(C`_\|_binary_DATA_\|_\*(C'\fR replaces the value
of binary fields.
.IP "\(bu" 4
\&\f(CW\*(C`ID3v2\-size\*(C'\fR, \f(CW\*(C`ID3v2\-pad\*(C'\fR, and \f(CW\*(C`ID3v2\-stripped\*(C'\fR are replaced by size of
ID3v2 tag in bytes, the amount of 0\-padding at the end of the tag
(not counting one extra 0 byte at the end of tag which may be needed for
unsyncing if the last char is \exFF), and size without padding.  Currently,
for modified ID3v2 tag, what is returned reflect the size on disk (i.e.,
before modification).
.IP "\(bu" 4
\&\f(CW\*(C`ID3v2\-modified\*(C'\fR is replaced by \f(CW\*(Aqmodified\*(Aq\fR if ID3v2 is present and
is modified in memory; otherwise is replaced by an empty string.
.IP "\(bu" 4
For strings of the form \f(CW\*(C`I(FLAGS)VALUE\*(C'\fR, \fI\s-1VALUE\s0\fR is interpolated
with flags in \fI\s-1FLAGS\s0\fR (see \*(L"interpolate_with_flags\*(R").  If \s-1FLAGS\s0
does not contain \f(CW\*(C`i\*(C'\fR, \s-1VALUE\s0 should have \f(CW\*(C`{}\*(C'\fR and \f(CW\*(C`\e\*(C'\fR backwacked.
.IP "\(bu" 4
For strings of the form \f(CW\*(C`T[FORMAT]\*(C'\fR, \fI\s-1FORMAT\s0\fR is split on comma, and
the resulting list of formats is used to convert the duration of the
audio to a string using the method \fIformat_time()\fR.  (E.g.,
\&\f(CW\*(C`%{T[=>m,?H:,{mL}]}\*(C'\fR would print duration in (optional) hours and minutes
rounded to the closest minute.)
.RE
.RS 4
.Sp
The default for the fill character is \s-1SPACE.\s0  Fill character should preceed
\&\f(CW\*(C`\-\*(C'\fR if both are given.  Example:
.Sp
.Vb 1
\&   Title: %(/)\-12.12t%{TIT3:; TIT3 is %\e{TIT3\e}}%{!TIT3:. No TIT3 is present}
.Ve
.Sp
will result in
.Sp
.Vb 1
\&   Title: TITLE///////; TIT3 is Op. 16
.Ve
.Sp
if title is \f(CW\*(C`TITLE\*(C'\fR, and \s-1TIT3\s0 is \f(CW\*(C`Op. 16\*(C'\fR, and
.Sp
.Vb 1
\&   Title: TITLE///////. No TIT3 is present
.Ve
.Sp
if title is \f(CW\*(C`TITLE\*(C'\fR, but \s-1TIT3\s0 is not present.
.Sp
.Vb 1
\&  Fat content: %{COMM(eng,fra,fre,rus,)[FatContent]}
.Ve
.Sp
will print the comment field with \fIDescription\fR \f(CW\*(C`FatContent\*(C'\fR
prefering the description in English to one in French, Russian, or any
other language (in this order).  (I do not know which one of
terminology/bibliography codes for French is used, so for safety
include both.)
.Sp
.Vb 1
\&  Composer: %{TCOM|a}
.Ve
.Sp
will use the ID3v2 field \f(CW\*(C`TCOM\*(C'\fR if present, otherwise uses \f(CW%a\fR (this is
similar to
.Sp
.Vb 1
\&  Composer: %{composer}
.Ve
.Sp
but the latter may be subject to (different) normalization, and/or
configuration variables).
.Sp
Interpolation of ID3v2 frames uses the minimal possible non-ambiguous
backslashing rules: the only backslashes needed are to protect the
innermost closing delimiter (\f(CW\*(C`]\*(C'\fR or \f(CW\*(C`}\*(C'\fR) appearing as a literal
character, or to protect backslashes \fIimmediately\fR preceding such
literal, or the closing delimiter.  E.g., the pattern equal to
.Sp
.Vb 1
\&  %{COMM(eng)[a\eb\e\ec\e}\e]end\e\e\e]\e\e\e\e]: comment \`a\eb\e\ec\e\e\e}]end\e]\e\e\*(Aq present}
.Ve
.Sp
checks for the presence of comment with the descriptor \f(CW\*(C`a\eb\e\ec\e}]end\e]\e\e\*(C'\fR.
Note that if you want to write this string as a Perl literal, a lot of
extra backslashes may be needed (unless you use \f(CW\*(C`<<\*(AqFOO\*(Aq\*(C'\fR
HERE-document).
.Sp
.Vb 1
\&  %{T[?Hh,?{mL}m,{SML}s]}
.Ve
.Sp
for a file of duration 2345.62sec will result in \f(CW\*(C`39m05.62s\*(C'\fR, while
.Sp
.Vb 1
\&  %{T[?H:,?{mL}:,{SL},?{ML}]}sec
.Ve
.Sp
will result in \f(CW\*(C`39:05.620sec\*(C'\fR.
.RE
.IP "interpolate_with_flags" 4
.IX Item "interpolate_with_flags"
.Vb 1
\&  @results = $mp3\->interpolate_with_flags($text, $flags);
.Ve
.Sp
Processes \f(CW$text\fR according to directives in the string \f(CW$flags\fR; \f(CW$flags\fR is
split into separate flag characters; the meanings (and order of application) of
flags are
.Sp
.Vb 11
\&   i                    interpolate via $mp3\->interpolate
\&   f                    interpret (the result) as filename, read from file
\&   F                    if file does not exist, it is not an error
\&   B                    read is performed in binary mode (otherwise
\&                                in text mode, modified per
\&                                \*(Aqdecode_encoding_files\*(Aq configuration variable)
\&   l                    split result per \*(Aqparse_split\*(Aq configuration variable
\&   n                    as l, using the track\-number\-th element (1\-based)
\&                                in the result
\&   I                    interpolate (again) via $mp3\->interpolate
\&   b                    unless present, remove leading and trailing whitespace
.Ve
.Sp
With \f(CW\*(C`l\*(C'\fR, may produce multiple results.  May be accessed via
interpolation of \f(CW\*(C`%{I(flags)text}\*(C'\fR.
.ie n .IP "parse_rex($pattern, $string)" 4
.el .IP "parse_rex($pattern, \f(CW$string\fR)" 4
.IX Item "parse_rex($pattern, $string)"
Parse \f(CW$string\fR according to the regular expression \f(CW$pattern\fR with
\&\f(CW\*(C`%\*(C'\fR\-escapes \f(CW\*(C`%%, %a, %t, %l, %y, %g, %c, %n, %e, %E\*(C'\fR etc.  The meaning
of escapes is the same as for method \*(L"interpolate\*(R"(); but (with
the exception of \f(CW\*(C`%%\*(C'\fR) they are
used not for \fIexpansion\fR, but for \fImatching\fR a part of \f(CW$string\fR
suitable to be a value for these fields.  Returns false on failure, a
hash reference with parsed fields otherwise (with \f(CW%a\fR setting the
field \f(CW\*(C`author\*(C'\fR, etc).
.Sp
Some more escapes are supported: \f(CW\*(C`%=a, %=t, %=l, %=y, %=g, %=c, %=n, %=e,
%=E, %=A, %=B, %=D, %=f, %=F, %=N, %={WHATEVER}\*(C'\fR \fImatch\fR
substrings which are \fIcurrent\fR values of artist/title/etc (\f(CW\*(C`%=n\*(C'\fR also
matches leading 0s; actual file-name matches ignore the difference
between \f(CW\*(C`/\*(C'\fR and \f(CW\*(C`\e\*(C'\fR, between one and multiple consequent dots (if
configuration variable \f(CW\*(C`parse_filename_merge_dots\*(C'\fR is true (default))
and are case-insensitive if configuration variable
\&\f(CW\*(C`parse_filename_ignore_case\*(C'\fR is true (default); moreover, \f(CW%n\fR,
\&\f(CW%y\fR, \f(CW\*(C`%=n\*(C'\fR, \f(CW\*(C`%=y\*(C'\fR will not match if the string-to-match is
adjacent to a digit).  Double \f(CW\*(C`=\*(C'\fR if you want to match to fail when
the corresponding conditional \f(CW\*(C`%\*(C'\fR\-escape would fail (a missing field,
or a zero-length field for required fields).
.Sp
The escapes \f(CW\*(C`%{U<number>}\*(C'\fR and escapes of the forms
\&\f(CW\*(C`%{ABCD}\*(C'\fR match any string; the
corresponding hash key in the result hash is what is inside braces;
here \f(CW\*(C`ABCD\*(C'\fR is a 4\-letter word possibly followed by 2\-digit number
(as in names of ID3v2 tags), or what can be put in
\&\f(CW\*(Aq%{FRAM(lang,list)[description]}\*(Aq\fR.
.Sp
.Vb 3
\&  $res = $mp3\->parse_rex( qr<^%a \- %t\e.\ew{1,4}$>,
\&                          $mp3\->filename_nodir ) or die;
\&  $author = $res\->{author};
.Ve
.Sp
2\-digit numbers, or \fInumber1/number2\fR with number1,2 up to 999 are
allowed for the track number (the leading 0 is stripped); 4\-digit
years in the range 1000..2999 are allowed for year.  Alternatively, if
option year_is_timestamp is \s-1TRUE\s0 (default), year may be a range of
timestamps in the format understood by ID3v2 method \fIyear()\fR (see
\&\*(L"year\*(R" in MP3::Tag::ID3v2).
.Sp
The escape \f(CW%E\fR matches the REx in the configuration variable \f(CW\*(C`extension\*(C'\fR;
the escape \f(CW%e\fR matches the part of \f(CW%E\fR after the leading dot.
.Sp
In list context, also returns an array reference with %{handler} groups
parsed (if present).  Such groups can match everything, and a successful match gives an
array element with \f(CW\*(C`[$method, $packages, $args, $matched]\*(C'\fR.
.Sp
Currently the regular expressions with capturing parens are not supported.
.IP "parse_rex_prepare($pattern)" 4
.IX Item "parse_rex_prepare($pattern)"
Returns a data structure which later can be used by \fIparse_rex_match()\fR.
These two are equivalent:
.Sp
.Vb 2
\&  $mp3\->parse_rex($pattern, $data);
\&  $mp3\->parse_rex_match($mp3\->parse_rex_prepare($pattern), $data);
.Ve
.Sp
This call constitutes the \*(L"slow part\*(R" of the \fIparse_rex()\fR call; it makes sense to
factor out this step if the \fIparse_rex()\fR with the same \f(CW$pattern\fR is called
against multiple \f(CW$data\fR.
.ie n .IP "parse_rex_match($prepared, $data)" 4
.el .IP "parse_rex_match($prepared, \f(CW$data\fR)" 4
.IX Item "parse_rex_match($prepared, $data)"
Matches \f(CW$data\fR against a data structure returned by \fIparse_rex_prepare()\fR.
These two are equivalent:
.Sp
.Vb 2
\&  $mp3\->parse_rex($pattern, $data);
\&  $mp3\->parse_rex_match($mp3\->parse_rex_prepare($pattern), $data);
.Ve
.ie n .IP "parse($pattern, $string)" 4
.el .IP "parse($pattern, \f(CW$string\fR)" 4
.IX Item "parse($pattern, $string)"
Parse \f(CW$string\fR according to the string \f(CW$pattern\fR with \f(CW\*(C`%\*(C'\fR\-escapes \f(CW\*(C`%%,
%a, %t, %l, %y, %g, %c, %n, %e, %E\*(C'\fR.  The meaning of escapes is the
same as for \*(L"interpolate\*(R". See \*(L"parse_rex($pattern, \f(CW$string\fR)\*(R"
for more details.  Returns false on failure, a hash reference with
parsed fields otherwise.
.Sp
.Vb 2
\&  $res = $mp3\->parse("%a \- %t.mp3", $mp3\->filename_nodir) or die;
\&  $author = $res\->{author};
.Ve
.Sp
2\-digit numbers are allowed for the track number; 4\-digit years in the range
1000..2999 are allowed for year.
.IP "parse_prepare($pattern)" 4
.IX Item "parse_prepare($pattern)"
Returns a data structure which later can be used by \fIparse_rex_match()\fR.
This is a counterpart of \fIparse_rex_prepare()\fR used with non-regular-expression
patterns.  These two are equivalent:
.Sp
.Vb 2
\&  $mp3\->parse($pattern, $data);
\&  $mp3\->parse_rex_match($mp3\->parse_prepare($pattern), $data);
.Ve
.Sp
This call constitutes the \*(L"slow part\*(R" of the \fIparse()\fR call; it makes sense to
factor out this step if the \fIparse()\fR with the same \f(CW$pattern\fR is called
against multiple \f(CW$data\fR.
.IP "\fIfilename()\fR" 4
.IX Item "filename()"
.PD 0
.IP "\fIabs_filename()\fR" 4
.IX Item "abs_filename()"
.IP "\fIfilename_nodir()\fR" 4
.IX Item "filename_nodir()"
.IP "\fIfilename_noextension()\fR" 4
.IX Item "filename_noextension()"
.IP "\fIfilename_nodir_noextension()\fR" 4
.IX Item "filename_nodir_noextension()"
.IP "\fIabs_filename_noextension()\fR" 4
.IX Item "abs_filename_noextension()"
.IP "dirname([$strip_levels])" 4
.IX Item "dirname([$strip_levels])"
.IP "\fIfilename_extension()\fR" 4
.IX Item "filename_extension()"
.IP "\fIfilename_extension_nodot()\fR" 4
.IX Item "filename_extension_nodot()"
.IP "dir_component([$level])" 4
.IX Item "dir_component([$level])"
.PD
.Vb 7
\&  $filename = $mp3\->filename();
\&  $abs_filename = $mp3\->abs_filename();
\&  $filename_nodir = $mp3\->filename_nodir();
\&  $abs_dirname = $mp3\->dirname();
\&  $abs_dirname = $mp3\->dirname(0);
\&  $abs_parentdir = $mp3\->dirname(1);
\&  $last_dir_component = $mp3\->dir_component(0);
.Ve
.Sp
Return the name of the audio file: either as given to the \fInew()\fR method, or
absolute, or directory-less, or originally given without extension, or
directory-less without extension, or
absolute without extension, or the directory part of the fullname only, or
filename extension (with dot included, or not).
.Sp
The extension is calculated using the \fIconfig()\fR value \f(CW\*(C`extension\*(C'\fR.
.Sp
The \fIdirname()\fR method takes an optional argument: the number of directory
components to strip; the \f(CW\*(C`dir_component($level)\*(C'\fR method returns one
component of the directory (to get the last use 0 as \f(CW$level\fR; this is the
default if no \f(CW$level\fR is specified).
.Sp
The configuration option \f(CW\*(C`decode_encoding_filename\*(C'\fR can be used to
specify the encoding of the filename; all these functions would use
filename decoded from this encoding.
.IP "\fImpeg_version()\fR" 4
.IX Item "mpeg_version()"
.PD 0
.IP "\fImpeg_layer()\fR" 4
.IX Item "mpeg_layer()"
.IP "\fImpeg_layer_roman()\fR" 4
.IX Item "mpeg_layer_roman()"
.IP "\fIis_stereo()\fR" 4
.IX Item "is_stereo()"
.IP "\fIis_vbr()\fR" 4
.IX Item "is_vbr()"
.IP "\fIbitrate_kbps()\fR" 4
.IX Item "bitrate_kbps()"
.IP "\fIfrequency_Hz()\fR" 4
.IX Item "frequency_Hz()"
.IP "\fIfrequency_kHz()\fR" 4
.IX Item "frequency_kHz()"
.IP "\fIsize_bytes()\fR" 4
.IX Item "size_bytes()"
.IP "\fItotal_secs()\fR" 4
.IX Item "total_secs()"
.IP "\fItotal_secs_int()\fR" 4
.IX Item "total_secs_int()"
.IP "\fItotal_secs_trunc()\fR" 4
.IX Item "total_secs_trunc()"
.IP "\fItotal_millisecs_int()\fR" 4
.IX Item "total_millisecs_int()"
.IP "\fItotal_mins()\fR" 4
.IX Item "total_mins()"
.IP "\fIleftover_mins()\fR" 4
.IX Item "leftover_mins()"
.IP "\fIleftover_secs()\fR" 4
.IX Item "leftover_secs()"
.IP "\fIleftover_secs_float()\fR" 4
.IX Item "leftover_secs_float()"
.IP "\fIleftover_secs_trunc()\fR" 4
.IX Item "leftover_secs_trunc()"
.IP "\fIleftover_msec()\fR" 4
.IX Item "leftover_msec()"
.IP "\fItime_mm_ss()\fR" 4
.IX Item "time_mm_ss()"
.IP "\fIis_copyrighted()\fR" 4
.IX Item "is_copyrighted()"
.IP "\fIis_copyrighted_YN()\fR" 4
.IX Item "is_copyrighted_YN()"
.IP "\fIframes_padded()\fR" 4
.IX Item "frames_padded()"
.IP "\fIframes_padded_YN()\fR" 4
.IX Item "frames_padded_YN()"
.IP "\fIchannel_mode_int()\fR" 4
.IX Item "channel_mode_int()"
.IP "\fIframes()\fR" 4
.IX Item "frames()"
.IP "\fIframe_len()\fR" 4
.IX Item "frame_len()"
.IP "\fIvbr_scale()\fR" 4
.IX Item "vbr_scale()"
.PD
These methods return the information about the contents of the \s-1MP3\s0
file.  If this information is not cached in ID3v2 tags (not
implemented yet), using these methods requires that the module
MP3::Info is installed.  Since these calls are
redirectoed to the module MP3::Info, the returned info is
subject to the same restrictions as the method \fIget_mp3info()\fR of this
module; in particular, the information about the frame number and
frame length is only approximate.
.Sp
\&\fIvbr_scale()\fR is from the \s-1VBR\s0 header; \fItotal_secs()\fR is not necessarily an
integer, but \fItotal_secs_int()\fR and \fItotal_secs_trunc()\fR are (first is
rounded, second truncated); \fItime_mm_ss()\fR has format \f(CW\*(C`MM:SS\*(C'\fR; the
\&\f(CW*_YN\fR flavors return the value as a string Yes or No;
\&\fImpeg_layer_roman()\fR returns the value as a roman numeral;
\&\fIchannel_mode()\fR takes values in \f(CW\*(Aqstereo\*(Aq, \*(Aqjoint stereo\*(Aq, \*(Aqdual
channel\*(Aq, \*(Aqmono\*(Aq\fR.
.IP "format_time" 4
.IX Item "format_time"
.Vb 1
\&  $output = $mp3\->format_time(67456.123, @format);
.Ve
.Sp
formats time according to \f(CW@format\fR, which should be a list of format
descriptors.  Each format descriptor is either a simple letter, or a
string in braces appropriate to be put after \f(CW\*(C`%\*(C'\fR in an interpolated
string.  A format descriptor can be followed by a literal string to be
put as a suffix, and can be preceded by a question mark, which says
that this part of format should be printed only if needed.
.Sp
Leftover minutes, seconds are formated 0\-padded to width 2 if they are
preceded by more coarse units.  Similarly, leftover milliseconds are
printed with leading dot, and 0\-padded to width 3.
.Sp
Two examples of useful \f(CW@format\fRs are
.Sp
.Vb 2
\&  qw(?H: ?{mL}: {SML})
\&  qw(?Hh ?{mL}m {SL} ?{ML})
.Ve
.Sp
Both will print hours, minutes, and milliseconds only if needed.  The
second one will use 3 digit-format after a point, the first one will
not print the trailing 0s of milliseconds.  The first one uses \f(CW\*(C`:\*(C'\fR as
separator of hours and minutes, the second one will use \f(CW\*(C`h m\*(C'\fR.
.Sp
Optionally, the first element of the array may be of the form
\&\f(CW\*(C`=>U\*(C'\fR, here \f(CW\*(C`U\*(C'\fR is one of \f(CW\*(C`h m s\*(C'\fR.  In this case, duration is
rounded to closest hours, min or second before processing.  (E.g.,
1.7sec would print as \f(CW1\fR with \f(CW@format\fRs above, but would print as
\&\f(CW2\fR if rounded to seconds.)
.IP "\fIcan_write()\fR" 4
.IX Item "can_write()"
checks permission to write per the configuration variable \f(CW\*(C`is_writable\*(C'\fR.
.IP "can_write_or_die($mess)" 4
.IX Item "can_write_or_die($mess)"
as \fIcan_write()\fR, but \fIdie()\fRs on non-writable files with meaningful error message
($mess is prepended to the message).
.IP "die_cant_write($mess)" 4
.IX Item "die_cant_write($mess)"
\&\fIdie()\fR with the same message as \fIcan_write_or_die()\fR.
.IP "\fIwritable_by_extension()\fR" 4
.IX Item "writable_by_extension()"
Checks that extension is (case-insensitively) in the list given by
configuration variable \f(CW\*(C`writable_extensions\*(C'\fR.
.ie n .IP "update_tags( [ $data,  [ $force2 ]] )" 4
.el .IP "update_tags( [ \f(CW$data\fR,  [ \f(CW$force2\fR ]] )" 4
.IX Item "update_tags( [ $data, [ $force2 ]] )"
.Vb 2
\&  $mp3 = MP3::Tag\->new($filename);
\&  $mp3\->update_tags();                  # Fetches the info, and updates tags
\&
\&  $mp3\->update_tags({});                # Updates tags if needed/changed
\&
\&  $mp3\->update_tags({title => \*(AqThis is not a song\*(Aq});   # Updates tags
.Ve
.Sp
This method updates ID3v1 and ID3v2 tags (the latter only if in-memory copy
contains any data, or \f(CW$data\fR does not fit ID3v1 restrictions, or \f(CW$force2\fR
argument is given)
with the the information about title, artist, album, year, comment, track,
genre from the hash reference \f(CW$data\fR.  The format of \f(CW$data\fR is the same as
one returned from \fIautoinfo()\fR (with or without the optional argument 'from').
The fields which are marked as coming from ID3v1 or ID3v2 tags are not updated
when written to the same tag.
.Sp
If \f(CW$data\fR is not defined or missing, \f(CW\*(C`autoinfo(\*(Aqfrom\*(Aq)\*(C'\fR is called to obtain
the data.  Returns the object reference itself to simplify chaining of method
calls.
.Sp
This is probably the simplest way to set data in the tags: populate
\&\f(CW$data\fR and call this method \- no further tinkering with subtags is
needed.
.IP "extension_is" 4
.IX Item "extension_is"
.Vb 1
\&  $mp3\->extension_is(@EXT_LIST)
.Ve
.Sp
returns \s-1TRUE\s0 if the extension of the filename coincides (case-insensitive)
with one of the elements of the list.
.ie n .IP """parse_cfg( [$filename] )""" 4
.el .IP "\f(CWparse_cfg( [$filename] )\fR" 4
.IX Item "parse_cfg( [$filename] )"
Reads configuration information from the specified file (defaults to
the value of configuration variable \f(CW\*(C`local_cfg_file\*(C'\fR, which is
\&\f(CW\*(C`~\*(C'\fR\-substituted).  Empty lines and lines starting with \f(CW\*(C`#\*(C'\fR are ignored.
The remaining lines should have format \f(CW\*(C`varname=value\*(C'\fR; leading
and trailing whitespace is stripped; there may be several lines with the same
\&\f(CW\*(C`varname\*(C'\fR; this sets list-valued variables.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Some defaults for the operation of this module (and/or scripts distributed
with this module) are set from
environment.  Assumed encodings (0 or encoding name): for read access:
.PP
.Vb 4
\&  MP3TAG_DECODE_V1_DEFAULT              MP3TAG_DECODE_V2_DEFAULT
\&  MP3TAG_DECODE_FILENAME_DEFAULT        MP3TAG_DECODE_FILES_DEFAULT
\&  MP3TAG_DECODE_INF_DEFAULT             MP3TAG_DECODE_CDDB_FILE_DEFAULT
\&  MP3TAG_DECODE_CUE_DEFAULT
.Ve
.PP
for write access:
.PP
.Vb 1
\&  MP3TAG_ENCODE_V1_DEFAULT              MP3TAG_ENCODE_FILES_DEFAULT
.Ve
.PP
(if not set, default to corresponding \f(CW\*(C`DECODE\*(C'\fR options).
.PP
Defaults for the above:
.PP
.Vb 1
\&  MP3TAG_DECODE_DEFAULT                 MP3TAG_ENCODE_DEFAULT
.Ve
.PP
(if the second one is not set, the value of the first one is used).
Value 0 for more specific variable will cancel the effect of the less
specific variables.
.PP
If the \f(CW\*(C`LANG\*(C'\fR environment variable indicates \f(CW\*(C`UTF\-8\*(C'\fR encoding, then
the "\f(CW\*(C`FILES\*(C'\fR" flavors default to \f(CW\*(C`utf8\*(C'\fR (unless this effect is already
achieved by the \f(CW\*(C`${^UNICODE}\*(C'\fR variable).  This may be disabled by setting
\&\f(CW\*(C`MP3TAG_DECODE_FILES_DEFAULT_RESET\*(C'\fR true in the environment (likewise for
\&\f(CW\*(C`EN\*(C'\fR\-code flavor).
.PP
These variables set default configuration settings for \f(CW\*(C`MP3::Tag\*(C'\fR;
the values are read during the load time of the module.  After load,
one can use \fIconfig()\fR/\fIget_config()\fR methods to change/access these
settings.  See \f(CW\*(C`encode_encoding_*\*(C'\fR and \f(CW\*(C`encode_decoding_*\*(C'\fR in
documentation of config method.  (Note that \f(CW\*(C`FILES\*(C'\fR variant
govern file read/written in non-binary mode by \*(L"ParseData\*(R" in \s-1MP3\s0 module,
as well as reading of control files of some scripts using this module, such as
typeset_audio_dir.)
.IP "\fB\s-1EXAMPLE\s0\fR" 4
.IX Item "EXAMPLE"
Assume that locally present \s-1CDDB\s0 files and \fI.inf\fR files
are in encoding \f(CW\*(C`cp1251\*(C'\fR (this is not supported by \*(L"standard\*(R", but since
the standard supports only a handful of languages, this is widely used anyway),
and that one wants \f(CW\*(C`ID3v1\*(C'\fR fields to be in the same encoding, but \f(CW\*(C`ID3v2\*(C'\fR
have an honest (Unicode, if needed) encoding.  Then set
.Sp
.Vb 3
\&   MP3TAG_DECODE_INF_DEFAULT=cp1251
\&   MP3TAG_DECODE_CDDB_FILE_DEFAULT=cp1251
\&   MP3TAG_DECODE_V1_DEFAULT=cp1251
.Ve
.Sp
Since \f(CW\*(C`MP3TAG_DECODE_V1_DEFAULT\*(C'\fR implies \f(CW\*(C`MP3TAG_ENCODE_V1_DEFAULT\*(C'\fR,
you will get the desired effect both for read and write of \s-1MP3\s0 tags.
.PP
Additionally, the following (unsupported) variables are currently
recognized by ID3v2 code:
.PP
.Vb 1
\&  MP3TAG_DECODE_UNICODE                 MP3TAG_DECODE_UTF8
.Ve
.PP
\&\s-1MP3TAG_DECODE_UNICODE\s0 (default 1) enables decoding; the target of
decoding is determined by \s-1MP3TAG_DECODE_UTF8:\s0 if 0, decoded values are
byte-encoded \s-1UTF\-8\s0 (every Perl character contains a byte of \s-1UTF\-8\s0
encoded string); otherwise (default) it is a native Perl Unicode
string.
.PP
If \f(CW\*(C`MP3TAG_SKIP_LOCAL\*(C'\fR is true, local customization files are not loaded.
.SH "CUSTOMIZATION"
.IX Header "CUSTOMIZATION"
Many aspects of operation of this module are subject to certain subtle
choices.  A lot of effort went into making these choices customizable,
by setting global or per-object configuration variables.
.PP
A certain degree of customization of global configuration variables is
available via the environment variables.  Moreover, at startup the local
customization file \fI~/.mp3tagprc\fR is read, and defaults are set accordingly.
.PP
In addition, to make customization as flexible as possible, \fI\s-1ALL\s0\fR aspects
of operation of \f(CW\*(C`MP3::Tag\*(C'\fR are subject to local override.  Three customization
modules
.PP
.Vb 1
\&  MP3::Tag::User        MP3::Tag::Site          MP3::Tag::Vendor
.Ve
.PP
are attempted to be loaded if present.  Only the first module (of
those present) is loaded directly; if sequential load is desirable,
the first thing a customization module should do is to call
.PP
.Vb 1
\&  MP3::Tag\->load_parents()
.Ve
.PP
method.
.PP
The customization modules have an opportunity to change global
configuration variables on load.  To allow more flexibility, they may
override any method defined in \f(CW\*(C`MP3::Tag\*(C'\fR; as usual, the overriden
method may be called using \f(CW\*(C`SUPER\*(C'\fR modifier (see \*(L"Method
invocation\*(R" in perlobj).
.PP
E.g., it is recommended to make a local customization file with
.PP
.Vb 9
\&  eval \*(Aqrequire Normalize::Text::Music_Fields\*(Aq;
\&  for my $elt ( qw( title track artist album comment year genre
\&                    title_track artist_collection person ) ) {
\&    no strict \*(Aqrefs\*(Aq;
\&    MP3::Tag\->config("translate_$elt", \e&{"Normalize::Text::Music_Fields::normalize_$elt"})
\&      if defined &{"Normalize::Text::Music_Fields::normalize_$elt"};
\&  }
\&  MP3::Tag\->config("short_person", \e&Normalize::Text::Music_Fields::short_person)
\&      if defined &Normalize::Text::Music_Fields::short_person;
.Ve
.PP
and install the (supplied, in the \fIexamples/modules\fR) module
Normalize::Text::Music_Fields which enables normalization of person
names (to a long or a short form), and of music piece names to
canonical forms.
.PP
To simplify debugging of local customization, it may be switched off
completely by setting \s-1MP3TAG_SKIP_LOCAL\s0 to \s-1TRUE\s0 (in environment).
.PP
For example, putting
.PP
.Vb 1
\&  id3v23_unsync = 0
.Ve
.PP
into \fI~/.mp3tagprc\fR will produce broken ID3v2 tags (but those required
by ITunes).
.SH "EXAMPLE SCRIPTS"
.IX Header "EXAMPLE SCRIPTS"
Some example scripts come with this module (either installed, or in directory
\&\fIexamples\fR in the distribution); they either use this module, or
provide data understood by this module:
.IP "mp3info2" 4
.IX Item "mp3info2"
perform command line manipulation of audio tags (and more!);
.IP "audio_rename" 4
.IX Item "audio_rename"
rename audio files according to associated tags (and more!);
.IP "typeset_mp3_dir" 4
.IX Item "typeset_mp3_dir"
write LaTeX files suitable for \s-1CD\s0 covers and normal-size sheet
descriptions of hierarchy of audio files;
.IP "mp3_total_time" 4
.IX Item "mp3_total_time"
Calculate total duration of audio files;
.IP "eat_wav_mp3_header" 4
.IX Item "eat_wav_mp3_header"
remove \s-1WAV\s0 headers from \s-1MP3\s0 files in \s-1WAV\s0 containers.
.IP "fulltoc_2fake_cddb" 4
.IX Item "fulltoc_2fake_cddb"
converts a \s-1CD\s0's \*(L"full \s-1TOC\*(R"\s0 to a \*(L"fake\*(R" \s-1CDDB\s0 file (header only).  Create
this file with something like
.Sp
.Vb 1
\&  readcd \-fulltoc dev=0,1,0 \-f=audio_cd >& nul
.Ve
.Sp
run similar to
.Sp
.Vb 1
\&  fulltoc_2fake_cddb < audio_cd.toc | cddb2cddb > cddb.out
.Ve
.IP "dir_mp3_2fake_cddb" 4
.IX Item "dir_mp3_2fake_cddb"
tries to convert a directory of \s-1MP3\s0 files to a \*(L"fake\*(R" \s-1CDDB\s0 file (header only);
assumes that files are a rip from a \s-1CD,\s0 and that alphabetical sort gives
the track order (works only heuristically, since quantization of duration
of \s-1MP3\s0 files and of \s-1CD\s0 tracks is so different).
.Sp
Run similar to
.Sp
.Vb 1
\&  dir_mp3_2fake_cddb | cddb2cddb > cddb.out
.Ve
.IP "inf_2fake_cddb" 4
.IX Item "inf_2fake_cddb"
tries to convert a directory of \fI.inf\fR files to a \*(L"fake\*(R" \s-1CDDB\s0 file (header
only).  (Still heuristic, since it can't guess the length of the leader.)
.Sp
Run similar to
.Sp
.Vb 1
\&  inf_2fake_cddb | cddb2cddb > cddb.out
.Ve
.IP "cddb2cddb" 4
.IX Item "cddb2cddb"
Reads a (header of) \s-1CDDB\s0 file from \s-1STDIN,\s0 outputs (on \s-1STDOUT\s0) the current
version of the database record.  Can be used to update a file, and/or to
convert a fake \s-1CDDB\s0 file to a real one.
.PP
(Last four do not use these modules!)
.PP
Some more examples:
.PP
.Vb 10
\&  # Convert from one (non\-standard\-conforming!) encoding to another
\&  perl \-MMP3::Tag \-MEncode \-wle \*(Aq
\&    my @fields = qw(artist album title comment);
\&    for my $f (@ARGV) {
\&      print $f;
\&      my $t = MP3::Tag\->new($f) or die;
\&      $t\->update_tags(
\&        { map { $_ => encode "cp1251", decode "koi8\-r", $t\->$_() }, @fields }
\&      );
\&    }\*(Aq list_of_audio_files
.Ve
.SH "Problems with ID3 format"
.IX Header "Problems with ID3 format"
The largest problem with \s-1ID3\s0 format is that the first versions of these
format were absolutely broken (underspecified).  It \fIlooks\fR like the newer
versions of this format resolved most of these problems; however, in reality
they did not (due to unspecified backward compatibility, and
grandfathering considerations).
.PP
What are the problems with \f(CW\*(C`ID3v1\*(C'\fR?  First, one of the fields was \f(CW\*(C`artist\*(C'\fR,
which does not make any sense.  In particular, different people/publishers
would put there performer(s), composer, author of text/lyrics, or a combination
of these.  The second problem is that the only allowed encoding was
\&\f(CW\*(C`iso\-8859\-1\*(C'\fR; since most of languages of the world can't be expressed
in this encoding, this restriction was completely ignored, thus the
encoding is essentially \*(L"unknown\*(R".
.PP
Newer versions of \f(CW\*(C`ID3\*(C'\fR allow specification of encodings; however,
since there is no way to specify that the encoding is \*(L"unknown\*(R", when a
tag is automatically upgraded from \f(CW\*(C`ID3v1\*(C'\fR, it is most probably assumed to be
in the \*(L"standard\*(R" \f(CW\*(C`iso\-8859\-1\*(C'\fR encoding.  Thus impossibility to
distinguish "unknown, assumed \f(CW\*(C`iso\-8859\-1\*(C'\fR\*(L" from \*(R"known to be \f(CW\*(C`iso\-8859\-1\*(C'\fR"
in \f(CW\*(C`ID3v2\*(C'\fR, essentially, makes any encoding specified in the tag \*(L"unknown\*(R"
(or, at least, \*(L"untrusted\*(R").  (Since the upgrade [or a chain of upgrades]
from the \f(CW\*(C`ID3v1\*(C'\fR tag to the \f(CW\*(C`ID3v2\*(C'\fR tag can result in any encoding of
the "supposedly \f(CW\*(C`iso\-8859\-1\*(C'\fR" tag, one cannot trust the content of
\&\f(CW\*(C`ID3v2\*(C'\fR tag even if it stored as Unicode strings.)
.PP
This is why this module provides what some may consider only lukewarm support
for encoding field in ID3v2 tags: if done fully automatic, it can allow
instant propagation of wrong information; and this propagation is in a form
which is quite hard to undo (but still possible to do with suitable settings
to this module; see \*(L"Examples on dealing with broken encodings\*(R" in mp3info2).
.PP
Likewise, the same happens with the \f(CW\*(C`artist\*(C'\fR field in \f(CW\*(C`ID3v1\*(C'\fR.  Since there
is no way to specify just \*(L"artist, type unknown\*(R" in \f(CW\*(C`ID3v2\*(C'\fR tags, when
\&\f(CW\*(C`ID3v1\*(C'\fR tag is automatically upgraded to \f(CW\*(C`ID3v2\*(C'\fR, the content would most
probably be put in the \*(L"main performer\*(R", \f(CW\*(C`TPE1\*(C'\fR, tag.  As a result, the
content of \f(CW\*(C`TPE1\*(C'\fR tag is also \*(L"untrusted\*(R" \- it may contain, e.g., the composer.
.PP
In my opinion, a different field should be used for \*(L"known to be
principal performer\*(R"; for example, the method \fIperformer()\fR (and the
script \fImp3info2\fR shipped with this module) uses \f(CW\*(C`%{TXXX[TPE1]}\*(C'\fR in
preference to \f(CW\*(C`%{TPE1}\*(C'\fR.
.PP
For example, interpolate \f(CW\*(C`%{TXXX[TPE1]|TPE1}\*(C'\fR or \f(CW\*(C`%{TXXX[TPE1]|a}\*(C'\fR \-
this will use the frame \f(CW\*(C`TXXX\*(C'\fR with identifier \f(CW\*(C`TPE1\*(C'\fR if present, if not,
it will use the frame \f(CW\*(C`TPE1\*(C'\fR (the first example), or will try to get \fIartist\fR
by other means (including \f(CW\*(C`TPE1\*(C'\fR frame) (the second example).
.SH "FILES"
.IX Header "FILES"
There are many files with special meaning to this module and its dependent
modules.
.IP "\fI*.inf\fR" 4
.IX Item "*.inf"
Files with extension \fI.inf\fR and the same basename as the audio file are
read by module \f(CW\*(C`MP3::Tag::Inf\*(C'\fR, and the extracted data is merged into the
information flow according to configuration variable \f(CW\*(C`autoinfo\*(C'\fR.
.Sp
It is assumed that these files are compatible in format to the files written
by the program \fIcdda2wav\fR.
.IP "\fIaudio.cddb\fR \fIcddb.out\fR \fIcddb.in\fR" 4
.IX Item "audio.cddb cddb.out cddb.in"
in the same directory as the audio file are read by module
\&\f(CW\*(C`MP3::Tag::CDDB_File\*(C'\fR, and the extracted data is merged into the
information flow according to configuration variable \f(CW\*(C`autoinfo\*(C'\fR.
.Sp
(In fact, the list may be customized by configuration variable \f(CW\*(C`cddb_files\*(C'\fR.)
.IP "\fIaudio_cd.toc\fR" 4
.IX Item "audio_cd.toc"
in the same directory as the audio file may be read by the method
\&\fIid3v2_frames_autofill()\fR (should be called explicitly) to fill the \f(CW\*(C`TXXX[MCDI\-fulltoc]\*(C'\fR
frame.  Depends on contents of configuration variable \f(CW\*(C`id3v2_frames_autofill\*(C'\fR.
.IP "\fI~/.mp3tagprc\fR" 4
.IX Item "~/.mp3tagprc"
By default, this file is read on startup (may be customized by overriding
the method \fIparse_cfg()\fR).  By default, the name of the file is in the
configuration variable \f(CW\*(C`local_cfg_file\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MP3::Tag::ID3v1, MP3::Tag::ID3v2, MP3::Tag::File,
MP3::Tag::ParseData, MP3::Tag::Inf, MP3::Tag::CDDB_File,
MP3::Tag::Cue, MP3::Tag::ImageExifTool, MP3::Tag::ImageSize,
MP3::Tag::LastResort, mp3info2, typeset_audio_dir.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2016 Thomas Geffert, Ilya Zakharevich.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the Artistic License, distributed
with Perl.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1192:" 4
.IX Item "Around line 1192:"
Expected text after =item, not a bullet
