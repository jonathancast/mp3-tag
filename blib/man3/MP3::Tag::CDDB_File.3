.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MP3::Tag::CDDB_File 3"
.TH MP3::Tag::CDDB_File 3 "2024-05-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag::CDDB_File \- Module for parsing CDDB files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $db = MP3::Tag::CDDB_File\->new($filename, $track); # Name of audio file
\&  my $db = MP3::Tag::CDDB_File\->new_from($record, $track); # Contents of CDDB 
\&
\&  ($title, $artist, $album, $year, $comment, $track) = $db\->parse();
.Ve
.PP
see MP3::Tag
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MP3::Tag::CDDB_File is designed to be called from the MP3::Tag module.
.PP
It parses the content of \s-1CDDB\s0 file.
.PP
The file is found in the same directory as audio file; the list of possible
file names is taken from the field \f(CW\*(C`cddb_files\*(C'\fR if set by MP3::Tag \fIconfig()\fR
method.
.IP "\fIparse()\fR" 4
.IX Item "parse()"
.Vb 2
\&  ($title, $artist, $album, $year, $comment, $track) =
\&     $db\->parse($what);
.Ve
.Sp
\&\fIparse_filename()\fR extracts information about artist, title, track number,
album and year from the \s-1CDDB\s0 record.  \f(CW$what\fR is optional; it maybe title,
track, artist, album, year, genre or comment. If \f(CW$what\fR is defined \fIparse()\fR will return
only this element.
.Sp
Additionally, \f(CW$what\fR can take values \f(CW\*(C`artist_collection\*(C'\fR (returns the value of
artist in the disk-info field \s-1DTITLE,\s0 but only if author is specified in the
track-info field \s-1TTITLE\s0), \f(CW\*(C`title_track\*(C'\fR (returns the title specifically from
track-info field \- the \f(CW\*(C`track\*(C'\fR may fall back to the info from disk-info
field), \f(CW\*(C`comment_collection\*(C'\fR (processed \s-1EXTD\s0 comment), \f(CW\*(C`comment_track\*(C'\fR
(processed \s-1EXTT\s0 comment).
.Sp
The returned year and genre is taken from \s-1DYEAR, DGENRE, EXTT, EXTD\s0 fields;
recognized prefixes in the two last fields are \s-1YEAR, ID3Y, ID3G.\s0
The declarations of this form are stripped from the returned comment.
.Sp
An alternative
syntax \*(L"Recorded\*(R"/\*(L"Recorded on\*(R"/\*(L"Recorded in\*(R"/ is also supported; the format
of the date recognized by \fIID3v2::year()\fR, or just a date field without a prefix.
.IP "\fItitle()\fR" 4
.IX Item "title()"
.Vb 1
\& $title = $db\->title();
.Ve
.Sp
Returns the title, obtained from the \f(CW\*(AqTracktitle\*(Aq\fR entry of the file.
.IP "\fIartist()\fR" 4
.IX Item "artist()"
.Vb 1
\& $artist = $db\->artist();
.Ve
.Sp
Returns the artist name, obtained from the \f(CW\*(AqPerformer\*(Aq\fR or
\&\f(CW\*(AqAlbumperformer\*(Aq\fR entries (the first which is present) of the file.
.IP "\fItrack()\fR" 4
.IX Item "track()"
.Vb 1
\& $track = $db\->track();
.Ve
.Sp
Returns the track number, stored during object creation, or queried from
the parent.
.IP "\fIyear()\fR" 4
.IX Item "year()"
.Vb 1
\& $year = $db\->year();
.Ve
.Sp
Returns the year, obtained from the \f(CW\*(AqYear\*(Aq\fR entry of the file.  (Often
not present.)
.IP "\fIalbum()\fR" 4
.IX Item "album()"
.Vb 1
\& $album = $db\->album();
.Ve
.Sp
Returns the album name, obtained from the \f(CW\*(AqAlbumtitle\*(Aq\fR entry of the file.
.IP "\fIcomment()\fR" 4
.IX Item "comment()"
.Vb 1
\& $comment = $db\->comment();
.Ve
.Sp
Returns the \f(CW\*(AqTrackcomment\*(Aq\fR entry of the file.  (Often not present.)
.IP "\fIgenre()\fR" 4
.IX Item "genre()"
.Vb 1
\& $genre = $db\->genre($filename);
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 36:" 4
.IX Item "Around line 36:"
=over without closing =back
