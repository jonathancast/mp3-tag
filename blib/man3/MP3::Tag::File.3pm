.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MP3::Tag::File 3"
.TH MP3::Tag::File 3 "2024-05-18" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag::File \- Module for reading / writing files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $mp3 = MP3::Tag\->new($filename);
\&
\&  ($title, $artist, $no, $album, $year) = $mp3\->parse_filename();
.Ve
.PP
see MP3::Tag
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MP3::Tag::File is designed to be called from the MP3::Tag module.
.PP
It offers possibilities to read/write data from files via \fBread()\fR, \fBwrite()\fR,
\&\fBtruncate()\fR, \fBseek()\fR, \fBtell()\fR, \fBopen()\fR, \fBclose()\fR; one can find the filename via
the \fBfilename()\fR method.
.IP "\fBparse_filename()\fR" 4
.IX Item "parse_filename()"
.Vb 1
\&  ($title, $artist, $no, $album, $year) = $mp3\->parse_filename($what, $filename);
.Ve
.Sp
\&\fBparse_filename()\fR tries to extract information about artist, title,
track number, album and year from the filename.  (For backward
compatibility it may be also called by deprecated name
\&\fBread_filename()\fR.)
.Sp
This is likely to fail for a lot of filenames, especially the album will
be often wrongly guessed, as the name of the parent directory is taken as
album name.
.Sp
\&\f(CW$what\fR and \f(CW$filename\fR are optional. \f(CW$what\fR maybe title, track, artist, album
or year. If \f(CW$what\fR is defined \fBparse_filename()\fR will return only this element.
.Sp
If \f(CW$filename\fR is defined this filename will be used and not the real
filename which was set by MP3::Tag with
\&\f(CW\*(C`MP3::Tag\->new($filename)\*(C'\fR.  Otherwise the actual filename is used
(subject to configuration variable \f(CW\*(C`decode_encoding_filename\*(C'\fR).
.Sp
Following formats will be hopefully recognized:
.Sp
\&\- album name/artist name \- song name.mp3
.Sp
\&\- album_name/artist_name\-song_name.mp3
.Sp
\&\- album.name/artist.name_song.name.mp3
.Sp
\&\- album name/(artist name) song name.mp3
.Sp
\&\- album name/01. artist name \- song name.mp3
.Sp
\&\- album name/artist name \- 01 \- song.name.mp3
.Sp
If artist or title end in \f(CW\*(C`(NUMBER)\*(C'\fR with 4\-digit \s-1NUMBER,\s0 it is considered
the year.
.IP "\fBtitle()\fR" 4
.IX Item "title()"
.Vb 1
\& $title = $mp3\->title($filename);
.Ve
.Sp
Returns the title, guessed from the filename. See also \fBparse_filename()\fR.  (For
backward compatibility, can be called by deprecated name \fBsong()\fR.)
.Sp
\&\f(CW$filename\fR is optional and will be used instead of the real filename if defined.
.IP "\fBartist()\fR" 4
.IX Item "artist()"
.Vb 1
\& $artist = $mp3\->artist($filename);
.Ve
.Sp
Returns the artist name, guessed from the filename. See also \fBparse_filename()\fR
.Sp
\&\f(CW$filename\fR is optional and will be used instead of the real filename if defined.
.IP "\fBtrack()\fR" 4
.IX Item "track()"
.Vb 1
\& $track = $mp3\->track($filename);
.Ve
.Sp
Returns the track number, guessed from the filename. See also \fBparse_filename()\fR
.Sp
\&\f(CW$filename\fR is optional and will be used instead of the real filename if defined.
.IP "\fByear()\fR" 4
.IX Item "year()"
.Vb 1
\& $year = $mp3\->year($filename);
.Ve
.Sp
Returns the year, guessed from the filename. See also \fBparse_filename()\fR
.Sp
\&\f(CW$filename\fR is optional and will be used instead of the real filename if defined.
.IP "\fBalbum()\fR" 4
.IX Item "album()"
.Vb 1
\& $album = $mp3\->album($filename);
.Ve
.Sp
Returns the album name, guessed from the filename. See also \fBparse_filename()\fR
The album name is guessed from the parent directory, so it is very likely to fail.
.Sp
\&\f(CW$filename\fR is optional and will be used instead of the real filename if defined.
.IP "\fBcomment()\fR" 4
.IX Item "comment()"
.Vb 1
\& $comment = $mp3\->comment($filename);   # Always undef
.Ve
.IP "\fBgenre()\fR" 4
.IX Item "genre()"
.Vb 1
\& $genre = $mp3\->genre($filename);       # Always undef
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 184:" 4
.IX Item "Around line 184:"
=over without closing =back
