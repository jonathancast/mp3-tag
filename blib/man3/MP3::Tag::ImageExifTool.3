.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MP3::Tag::ImageExifTool 3"
.TH MP3::Tag::ImageExifTool 3 "2024-05-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag::ImageExifTool \- extract size info from image files via Image::ExifTool.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $db = MP3::Tag::ImageExifTool\->new($filename);     # Name of multimedia file
.Ve
.PP
see MP3::Tag
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MP3::Tag::ImageExifTool is designed to be called from the MP3::Tag module.
.PP
It implements the (standard) methods qw(title track artist album year genre comment),
as well as \fIwidth()\fR, \fIheight()\fR, \fIbit_depth()\fR, \fI_duration()\fR and \fImime_type()\fR methods (sizes in pixels).
.PP
Use method \f(CW\*(C`field(\*(AqFieldName\*(Aq)\*(C'\fR to access a particular field provided by \f(CW\*(C`Image::ExifTool\*(C'\fR.
.PP
These methods return \f(CW\*(C`undef\*(C'\fR if \f(CW\*(C`Image::ExifTool\*(C'\fR is not available, or does not return valid data.
