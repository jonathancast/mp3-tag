.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MP3::Tag::Inf 3"
.TH MP3::Tag::Inf 3 "2024-05-18" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MP3::Tag::Inf \- Module for parsing .inf files associated with music tracks.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $mp3inf = MP3::Tag::Inf\->new($filename);   # Name of MP3 or .INF file
\&                                                # or an MP3::Tag::File object
\&
\&  ($title, $artist, $album, $year, $comment, $track) = $mp3inf\->parse();
.Ve
.PP
see MP3::Tag
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MP3::Tag::Inf is designed to be called from the MP3::Tag module.
.PP
It parses the content of \fI.inf\fR file (created, e.g., by cdda2wav).
.IP "\fBparse()\fR" 4
.IX Item "parse()"
.Vb 2
\&  ($title, $artist, $album, $year, $comment, $track) =
\&     $mp3inf\->parse($what);
.Ve
.Sp
\&\fBparse_filename()\fR extracts information about artist, title, track number,
album and year from the \fI.inf\fR file.  \f(CW$what\fR is optional; it maybe title,
track, artist, album, year or comment. If \f(CW$what\fR is defined \fBparse()\fR will return
only this element.
.Sp
As a side effect of this call, \f(CW$mp3inf\fR\->{info} is set to the hash reference
with the content of particular elements of the \fI.inf\fR file.  Typically present
are the following fields:
.Sp
.Vb 10
\&  CDINDEX_DISCID
\&  CDDB_DISCID
\&  MCN
\&  ISRC
\&  Albumperformer
\&  Performer
\&  Albumtitle
\&  Tracktitle
\&  Tracknumber
\&  Trackstart
\&  Tracklength
\&  Pre\-emphasis
\&  Channels
\&  Copy_permitted
\&  Endianess
\&  Index
.Ve
.Sp
The following fields are also recognized:
.Sp
.Vb 2
\&  Year
\&  Trackcomment
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 30:" 4
.IX Item "Around line 30:"
=over without closing =back
